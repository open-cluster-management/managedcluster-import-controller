# IBM Confidential
# OCO Source Materials
# 5737-E67
# (C) Copyright IBM Corporation 2018 All Rights Reserved
# The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.

SHELL := /bin/bash

.EXPORT_ALL_VARIABLES:

GIT_REMOTE_URL = $(shell git config --get remote.origin.url)
GITHUB_USER := $(shell echo $(GITHUB_USER) | sed 's/@/%40/g')
GITHUB_TOKEN ?=

PROJECT_DIR = $(shell 'pwd')
BUILD_DIR = $(PROJECT_DIR)/build
BIN_DIR = $(PROJECT_DIR)/bin
VENDOR_DIR = $(PROJECT_DIR)/vendor
I18N_DIR = $(PROJECT_DIR)/pkg/i18n

ARCH ?= $(shell uname -m)
ifeq ($(ARCH), x86_64)
	ARCH = amd64
endif
ARCH_TYPE = $(ARCH)

CGO_ENABLED=0
GO111MODULE := on
# GOFLAGS=-mod=vendor
GOPACKAGES=$(shell go list ./... | grep -v /vendor/ | grep -v /internal | grep -v /build | grep -v /test | grep -v /i18n/resources)
GOOS = $(shell go env GOOS)
GOARCH = $(ARCH)
GOPRIVATE="github.ibm.com"

DOCKER_FILE = build/Dockerfile
DOCKER_BUILD_PATH = .build-docker
DOCKER_IMAGE ?= ibm-rcm-controller
DOCKER_IMAGE_ARCH = $(DOCKER_IMAGE)-$(ARCH)
## WARNING: OPERATOR IMAGE_DESCRIPTION VAR MUST NOT CONTAIN SPACES.
IMAGE_DESCRIPTION ?= IBM_Multicloud_Cluster_Controller
DOCKER_REGISTRY ?= hyc-cloud-private-scratch-docker-local.artifactory.swg-devops.com
DOCKER_NAMESPACE ?= ibmcom
DOCKER_BUILD_TAG ?= latest
DOCKER_TAG ?= $(shell whoami)
WORKING_CHANGES = $(shell git status --porcelain)
BUILD_DATE = $(shell date +%m/%d@%H:%M:%S)
VCS_REF = $(if $(WORKING_CHANGES),$(GIT_COMMIT)-$(BUILD_DATE),$(GIT_COMMIT))

BEFORE_SCRIPT := $(shell ./build/before-make-script.sh)

-include $(shell curl -fso .build-harness -H "Authorization: token ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3.raw" "https://raw.github.ibm.com/ICP-DevOps/build-harness/master/templates/Makefile.build-harness"; echo .build-harness)

DOCKER_BUILD_OPTS = --build-arg VCS_REF=$(VCS_REF) --build-arg VCS_URL=$(GIT_REMOTE_URL) --build-arg IMAGE_NAME=$(DOCKER_IMAGE) --build-arg IMAGE_DESCRIPTION=$(IMAGE_DESCRIPTION) --build-arg ARCH_TYPE=$(ARCH_TYPE)


.PHONY: deps
## Download all project dependencies
deps: init
	GO111MODULE=off go get -u github.ibm.com/IBMPrivateCloud/armada-opensource-lib/ossc
ifeq (, $(shell which golangci-lint))
	GO111MODULE=off go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
endif
ifeq (, $(shell which operator-sdk))
	./build/install-operator-sdk.sh
endif
	go mod tidy

.PHONY: lint
lint:
	golangci-lint run

.PHONY: check
## Runs a set of required checks
check: %check: lint #%go:ossc:check #%go:copyright:check

.PHONY: build
## Build all cmd binary files
build: %build:

.PHONY: image
image:
	$(MAKE) operator:build

.PHONY: clean
## Clean build-harness and remove Go generated build and test files
clean:: %clean: %go:clean
	@[ "$(BUILD_HARNESS_PATH)" == '/' ] || \
	 [ "$(BUILD_HARNESS_PATH)" == '.' ] || \
	   rm -rf $(BUILD_HARNESS_PATH)


.PHONY: operator\:build
operator\:build:
	## WARNING: DOCKER_BUILD_OPTS MUST NOT CONTAIN ANY SPACES.
 	# $(info Building operator)
	# $(info GOOS: $(GOOS))
	# $(info GOARCH: $(GOARCH))
	$(info --IMAGE: $(DOCKER_IMAGE))
	$(info --TAG: $(DOCKER_BUILD_TAG))
	$(info --DOCKER_BUILD_OPTS: $(DOCKER_BUILD_OPTS))
	operator-sdk build $(DOCKER_IMAGE):$(DOCKER_BUILD_TAG) --image-build-args "$(DOCKER_BUILD_OPTS)"

.PHONY: operator\:run\:env
operator\:run\:env:
	export ENDPOINT_CRD_FILE="deploy/resources/multicloud_v1beta1_endpoint_crd.yaml"

.PHONY: operator\:run
operator\:run: operator\:run\:env
	ENDPOINT_CRD_FILE="deploy/resources/multicloud_v1beta1_endpoint_crd.yaml" \
	operator-sdk up local --namespace="" --operator-flags="--zap-devel=true"

### HELPER UTILS #######################

.PHONY: utils\:crds\:install
utils\:crds\:install:
	kubectl apply -f deploy/crds/multicloud_v1beta1_endpoint_crd.yaml

.PHONY: utils\:crds\:uninstall
utils\:crds\:uninstall:
	kubectl delete -f deploy/crds/multicloud_v1beta1_endpoint_crd.yaml


.PHONY: helpz
helpz:
ifndef build-harness
	$(eval MAKEFILE_LIST := Makefile build-harness/modules/go/Makefile)
endif
