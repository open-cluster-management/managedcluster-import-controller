#!/bin/sh -e
# set -x
# This is documented here:
# https://docs.openshift.com/container-platform/3.11/creating_images/guidelines.html#openshift-specific-guidelines

function getAWSParams() {
    APISERVER=https://kubernetes.default.svc
    SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
    TOKEN=$(cat ${SERVICEACCOUNT}/token)
    CACERT=${SERVICEACCOUNT}/ca.crt
    SECRET=$(curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -X GET ${APISERVER}/api/v1/namespaces/open-cluster-management/secrets/aws-s3-coverage)

    AWS_ACCESS_KEY_ID=$(echo ${SECRET} | jq -r .data.aws_access_key_id | base64 -d)
    AWS_SECRET_ACCESS_KEY=$(echo ${SECRET} | jq -r .data.aws_secret_access_key | base64 -d)

    AWS_BUCKET_NAME_S=$(echo ${SECRET} | jq -r .data.aws_bucket_name)
    if [ -n "$AWS_BUCKET_NAME_S" ]; then
    AWS_BUCKET_NAME=$(echo $AWS_BUCKET_NAME_S | base64 -d)
    fi

    AWS_BUCKET_FOLDER_S=$(echo ${SECRET} | jq -r .data.aws_bucket_folder)
    if [ -n "$AWS_BUCKET_FOLDER_S" ]; then
    AWS_BUCKET_FOLDER=$(echo $AWS_BUCKET_FOLDER_S | base64 -d)
    fi

    AWS_REGION_S=$(echo ${SECRET} | jq -r .data.aws_AWS_REGION)
    if [ -n "$AWS_REGION_S" ]; then
    AWS_REGION="us-east-2"
    fi
}

function hmac_sha256 {
  key="$1"
  data="$2"
  printf         '%s' "$data" | openssl dgst -sha256 -hex -mac HMAC -macopt "${key}"     2>/dev/null | sed 's/^.* //'
}

function put_aws {
    fileLocal=$1
    fileRemote="$2"
    storageClass="REDUCED_REDUNDANCY"

    date=$(date -u +"%Y%m%d")
    amzDate=$(date -u +%Y%m%dT%H%M%SZ)

    httpReq='PUT'
    authType='AWS4-HMAC-SHA256'
    service="s3"
    baseUrl=".${service}.amazonaws.com"
    if hash file 2>/dev/null; then
    contentType="$(file -b --mime-type "${fileLocal}")"
    else
    contentType='application/octet-stream'
    fi

    if [ -f "${fileLocal}" ]; then
    payloadHash=$(openssl dgst -sha256 -hex < "${fileLocal}" 2>/dev/null | sed 's/^.* //')
    else
    echo "File not found: '${fileLocal}'"
    exit 1
    fi

    dateKey=$(hmac_sha256 key:"AWS4$AWS_SECRET_ACCESS_KEY" $date)
    dateRegionKey=$(hmac_sha256 hexkey:$dateKey $AWS_REGION)
    dateRegionServiceKey=$(hmac_sha256 hexkey:$dateRegionKey ${service})
    signingKey=$(hmac_sha256 hexkey:$dateRegionServiceKey "aws4_request")

    headerList='content-type;host;x-amz-content-sha256;x-amz-date;x-amz-server-side-encryption;x-amz-storage-class'

    canonicalRequest="\
${httpReq}
/${fileRemote}

content-type:${contentType}
host:${AWS_BUCKET_NAME}${baseUrl}
x-amz-content-sha256:${payloadHash}
x-amz-date:${amzDate}
x-amz-server-side-encryption:AES256
x-amz-storage-class:${storageClass}

${headerList}
${payloadHash}"

    canonicalRequestHash=$(printf '%s' "${canonicalRequest}" | openssl dgst -sha256 -hex 2>/dev/null | sed 's/^.* //')

    stringToSign="\
${authType}
${amzDate}
${date}/${AWS_REGION}/${service}/aws4_request
${canonicalRequestHash}"

    signature=$(hmac_sha256 "hexkey:${signingKey}" "${stringToSign}")

    curl -s -L --proto-redir =https -X "${httpReq}" -T "${fileLocal}" \
    -H "Content-Type: ${contentType}" \
    -H "Host: ${AWS_BUCKET_NAME}${baseUrl}" \
    -H "X-Amz-Content-SHA256: ${payloadHash}" \
    -H "X-Amz-Date: ${amzDate}" \
    -H "X-Amz-Server-Side-Encryption: AES256" \
    -H "X-Amz-Storage-Class: ${storageClass}" \
    -H "Authorization: ${authType} Credential=${AWS_ACCESS_KEY_ID}/${date}/${AWS_REGION}/${service}/aws4_request, SignedHeaders=${headerList}, Signature=${signature}" \
    "https://${AWS_BUCKET_NAME}${baseUrl}/${fileRemote}"
}

trap_with_arg() {
    func="$1" ; shift
    for sig ; do
        trap "$func $sig" "$sig"
    done
}

func_trap() {
    echo "Trapped: $1"
    getAWSParams

    echo "AWS_BUCKET_NAME="$AWS_BUCKET_NAME
    echo "AWS_BUCKET_FOLDER="$AWS_BUCKET_FOLDER
    echo "AWS_REGION="$AWS_REGION

    echo "Save coverage data... "$FILEPATH.out
    kill -$1 $PID
    wait_data $FILEPATH.out
    cat $FILEPATH.out
    if [ -n "$AWS_BUCKET_NAME" ]; then
       REMOTEFILE=$FILENAME.out
       if [ -n "$AWS_BUCKET_FOLDER" ]; then
          REMOTEFILE=$AWS_BUCKET_FOLDER/$FILENAME.out
       fi
       put_aws $FILEPATH.out $REMOTEFILE
    fi
}

wait_data() {
   n="10"
    while [ $n != 0 ]; do
        if [ -f $1 ]; then
            break
        fi
        echo "Coverage data not posted yet..."$1
        sleep 5
        n=$[$n-1]
    done
}

if ! whoami &>/dev/null; then
  if [ -w /etc/passwd ]; then
    echo "${USER_NAME:-rcm-controller}:x:$(id -u):$(id -g):${USER_NAME:-rcm-controller} user:${HOME}:/sbin/nologin" >> /etc/passwd
  fi
fi

FILENAME=$HOSTNAME-`date +%s%N`
FILEPATH=/tmp/coverage/$FILENAME
mkdir -p /tmp/coverage

${OPERATOR} -test.run "^TestRunMain$" -test.coverprofile=$FILEPATH.out $@ & PID=$!

# put_aws version/version.go $AWS_BUCKET_FOLDER/$FILENAME.out
trap_with_arg func_trap 15

wait $PID