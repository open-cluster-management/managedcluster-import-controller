// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/hub/managedcluster/manifests/managedcluster-clusterrole.yaml
// resources/hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml
// resources/hub/managedcluster/manifests/managedcluster-service-account.yaml
// resources/klusterlet/bootstrap_secret.yaml
// resources/klusterlet/cluster_role.yaml
// resources/klusterlet/cluster_role_binding.yaml
// resources/klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml
// resources/klusterlet/image_pull_secret.yaml
// resources/klusterlet/klusterlet.yaml
// resources/klusterlet/klusterlet_admin_aggregate_clusterrole.yaml
// resources/klusterlet/namespace.yaml
// resources/klusterlet/operator.yaml
// resources/klusterlet/service_account.yaml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hubManagedclusterManifestsManagedclusterClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x58\x69\x10\x1b\xba\x0d\x31\x30\xc1\xc0\xc0\x82\x3a\xb8\xa9\x49\xad\xde\x9d\x83\xed\x6b\x05\x55\xff\x3b\x6a\x93\x81\xaa\x64\x7a\x27\xbd\x4f\xe7\xf7\x1e\x0e\xfc\x4e\x6a\x2c\x25\x82\xae\xb0\x6b\xb1\xfa\x46\x94\x7f\xd0\x59\x4a\xbb\x7d\xb0\x96\xe5\x6e\x77\x1f\xb6\x5c\xd6\x11\x9e\x52\x35\x27\x7d\x93\x44\x21\x93\xe3\x1a\x1d\x63\x00\x28\x98\x29\x82\x7d\x9b\x53\x8e\x32\x50\x59\x74\x23\xb9\xc8\x58\xb0\xa7\x4c\xc5\xe3\xf8\x5c\x4f\x4e\x5c\x89\xb8\xb9\xe2\x10\x0f\x07\x68\x5f\x46\x73\x3a\xf0\x8a\x99\xe0\x78\x0c\x5a\x13\x59\x0c\x37\xf0\x98\x92\xec\x61\xfa\x01\xb0\xa7\xe2\xe0\x02\x2a\x8e\x4e\xc0\x6e\xd0\x91\x3a\x7f\x72\x87\x4e\x61\x01\x38\xf0\xb3\x4a\x1d\x2c\xc2\x47\xf3\xc7\xb2\xa9\x52\xb3\x0c\x00\x4a\x26\x55\x3b\xba\x82\xb8\x2f\x5c\x7a\xa5\xaf\x4a\xe6\x76\x66\x77\xa4\xab\x91\x53\x42\xa7\xe6\x16\x9a\x9e\xfc\x24\x89\xed\xac\x7b\xf4\x6e\xd3\x2c\xe7\xc3\xf6\xe4\x57\xc9\xc6\xba\xed\xcc\x64\xff\x06\xbd\x9c\xd1\x2e\x80\xd3\x6e\x67\x68\x76\xd2\xcb\x32\xa7\x0a\xcb\xf0\x1b\x00\x00\xff\xff\x88\xb9\xb0\x2d\x05\x02\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterroleYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrole.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterroleYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8e\xb1\x4e\xc3\x40\x0c\x86\xf7\x7b\x8a\x7b\x81\x04\xb1\x21\x6f\x94\x81\x09\x86\x22\xb1\x3b\x17\x53\x4c\x73\xf6\xe9\xec\xab\x04\x55\xdf\x1d\x85\xa4\x48\xa8\x12\x5b\x37\x4b\xff\xe7\xff\xfb\xb1\xf0\x2b\x55\x63\x15\x88\x75\xc0\xd4\x63\xf3\x77\xad\xfc\x85\xce\x2a\xfd\xfe\xce\x7a\xd6\x9b\xc3\x6d\xd8\xb3\x8c\x10\x1f\xa6\x66\x4e\x75\xab\x13\x6d\x58\x46\x96\x5d\xc8\xe4\x38\xa2\x23\x84\x18\x05\x33\x41\xb4\x4f\x73\xca\xa0\x85\xa4\x4b\xcb\x43\x97\x51\x70\x47\x99\xc4\x61\x39\xc7\x35\x81\x41\xd5\xcd\x2b\x16\x38\x1e\x63\xff\xb4\x84\xab\xe7\x19\x33\xc5\xd3\x29\x54\x9d\x68\x4b\x6f\xb3\x02\x0b\x3f\x56\x6d\xe5\x9f\xb9\x21\xc6\x8b\xb5\x57\x1c\x67\x6d\xf8\xa0\xe4\x06\xa1\x5b\xbd\x2f\x54\x0f\x9c\xe8\x3e\x25\x6d\xe2\xbf\xea\xb9\x62\x73\x2e\xfc\xcb\x9c\xbb\x16\xd4\x0a\xa6\x95\xbf\x54\xfe\x84\x33\xfb\x1d\x00\x00\xff\xff\x8e\x12\x91\x7d\xbb\x01\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterrolebindingYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\xb1\x0a\xc2\x30\x14\x85\xe1\x3d\x4f\x71\xe9\x03\x08\xae\xd9\xd4\xd9\x2e\x82\xfb\x21\x39\x48\xd0\xdc\x84\xe4\xb6\x4b\xe9\xbb\x0b\x62\x86\xce\xff\xf7\xa3\xa6\x27\x5b\x4f\x45\xbd\xac\x67\xf7\x4e\x1a\xbd\x3c\xd8\xd6\x14\x78\x09\xa1\x2c\x6a\x2e\xd3\x10\x61\xf0\x4e\x44\x91\xe9\x65\xda\x36\x39\x5d\x4b\xb1\x6e\x0d\xf5\xc8\x67\x64\xca\xbe\x4f\x7f\xdc\x2b\xc2\x38\xee\x50\xbc\x18\x6f\x9f\xa5\x1b\xdb\x3c\xea\x4f\x7f\x03\x00\x00\xff\xff\xfa\x75\x6d\xe8\x89\x00\x00\x00")

func hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterServiceAccountYaml,
		"hub/managedcluster/manifests/managedcluster-service-account.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterServiceAccountYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletBootstrap_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xb1\x0a\xc2\x30\x14\x45\xf7\x7c\xc5\x23\x7b\x05\xd7\x8c\xae\x05\x1d\x04\xf7\x97\xf4\xaa\xa1\x6d\x12\x93\x17\x41\x4a\xff\x5d\x94\x46\xe7\x7b\xce\xb9\x9c\xfc\x05\xb9\xf8\x18\x0c\x3d\xf7\x6a\xf4\x61\x30\x74\x86\xcb\x10\x35\x43\x78\x60\x61\xa3\x88\x02\xcf\x30\xa4\x6d\x8c\x52\x24\x73\xea\xee\xd5\x76\x63\xb5\x70\x31\x5c\xfd\x4d\x6f\x48\x49\xec\x3e\xdc\xb2\xd0\xae\x9f\x6a\x11\xe4\x09\x72\x6c\x0b\xad\xab\x56\xf2\x4a\x30\x74\x4a\xfc\xa8\x50\xad\xff\x4f\x6d\xf6\xa1\x3d\xf5\xbf\xe5\x6b\xbf\x03\x00\x00\xff\xff\x3c\x92\x16\x61\xb1\x00\x00\x00")

func klusterletBootstrap_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletBootstrap_secretYaml,
		"klusterlet/bootstrap_secret.yaml",
	)
}

func klusterletBootstrap_secretYaml() (*asset, error) {
	bytes, err := klusterletBootstrap_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/bootstrap_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\x3f\xb3\xd3\x30\x10\xc4\x7b\x7f\x0a\x8d\x69\x5f\xfc\x86\x8e\x71\xc7\x50\xd0\x53\xd0\x30\x29\x2e\xf2\x92\x27\x22\xeb\x34\x77\x27\x67\xe0\xd3\x33\xfe\x43\x08\x76\x02\xcc\x90\x82\xca\x92\x4f\x5a\xfd\x76\x75\xa2\x1c\x3e\x42\x34\x70\x6a\x9d\x1c\xc8\x37\x54\xec\x85\x25\x7c\x23\x0b\x9c\x9a\xd3\x1b\x6d\x02\x3f\x0f\xaf\xab\x53\x48\x5d\xeb\xde\xc5\xa2\x06\xf9\xc0\x11\x55\x0f\xa3\x8e\x8c\xda\xca\xb9\x44\x3d\x5a\x77\x9a\xab\x11\x56\x49\x89\xd0\xb6\x7a\xe5\xde\xc6\xc8\xe7\xab\x8a\x33\x76\x5e\x40\x06\x77\x66\x39\x45\xa6\xae\xda\x39\xca\xe1\xbd\x70\xc9\xda\xba\x4f\x75\xbd\xaf\x9c\x13\x28\x17\xf1\x98\xfe\x28\xbc\xc0\xb4\x7e\x72\xb5\xe7\xf4\x39\x1c\x7b\xca\xd3\x4c\x21\x43\xf0\x20\xef\xb9\x24\xd3\x69\xe7\x00\x39\x4c\xbb\xe6\x63\xc6\x65\x47\xd8\xf8\x89\x41\xa7\x6f\xc9\xdd\x52\x38\x93\xf9\x97\x71\x90\x7f\x0c\x3a\x44\x18\xea\xfd\x1a\xea\x56\x2e\x37\x40\xcb\xe1\x0b\xbc\x91\xf7\x50\x15\x0c\x01\xe7\xdb\x50\x1b\xfd\xad\xd6\x98\xa9\x66\xf2\x58\x29\xac\xcc\x2c\x16\xee\x0b\x3f\xb9\x1a\x03\x92\xe9\x5d\xea\xb9\x7c\x2f\xbc\x4b\x34\x4b\x6c\xdb\x68\x72\xd6\xad\x68\x87\x1c\xf9\x6b\xff\x3b\xe5\x07\x5c\xcb\xdd\x9e\xdd\x02\xf9\xb9\x07\x85\x23\x0e\x21\x75\x21\x1d\xa7\x16\xfa\x65\xfe\xbf\x81\x5e\x08\x1f\x88\x36\xf6\x83\x7a\x8a\xcb\xba\xd1\x7b\xbd\xbf\xbc\xd4\x54\x7c\x2c\xd0\xf1\x99\xf6\x94\xe8\x88\xeb\xb7\x4b\x39\x68\xb3\x76\xc6\x19\x42\xc6\xd2\x70\x46\xda\x2d\xf0\xbb\x79\xf3\x78\xfd\x37\x3d\xfe\x14\xfd\xab\xee\xbe\x36\xf6\xc7\xa8\xff\x15\xe8\x59\x8d\xac\xac\xb8\xd6\xe7\xef\xab\xef\x01\x00\x00\xff\xff\x55\x08\xf3\xc6\x3b\x05\x00\x00")

func klusterletCluster_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_roleYaml,
		"klusterlet/cluster_role.yaml",
	)
}

func klusterletCluster_roleYaml() (*asset, error) {
	bytes, err := klusterletCluster_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x6e\xc3\x30\x0c\x05\x77\x7d\x05\xe1\xbd\x2a\xba\x15\xda\xda\x0e\x1d\x0a\x74\x70\x81\xee\xb4\xcc\x24\x8c\x65\x51\x90\x28\x0f\x31\xfc\xef\x41\xe0\x24\x4b\x8c\xac\x3c\xde\x3b\x4c\xfc\x4f\xb9\xb0\x44\x07\xb9\x43\x6f\xb1\xea\x41\x32\x9f\x50\x59\xa2\x1d\xde\x8b\x65\x79\x9d\xde\xcc\xc0\xb1\x77\xf0\x15\x6a\x51\xca\xad\x04\xfa\xe4\xd8\x73\xdc\x9b\x91\x14\x7b\x54\x74\x06\x20\xe2\x48\x0e\x86\xf5\x29\x90\x9a\x2c\x81\x5a\xda\x5d\x18\x26\xfe\xce\x52\xd3\x93\x8e\x01\x78\xc8\x6c\xad\x96\xda\x1d\xc9\x6b\x71\xe6\xe5\x2a\xfc\x51\x9e\xd8\xd3\x87\xf7\x52\xa3\x6e\x39\xeb\xa9\x24\xf4\xe4\xa0\x99\x67\xb0\x3f\x77\xf8\x7b\x23\xb0\x2c\x8d\x39\x07\x00\x00\xff\xff\xdc\x27\xb7\x62\x13\x01\x00\x00")

func klusterletCluster_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_role_bindingYaml,
		"klusterlet/cluster_role_binding.yaml",
	)
}

func klusterletCluster_role_bindingYaml() (*asset, error) {
	bytes, err := klusterletCluster_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xcd\x6e\xe4\xb8\x11\xbe\xf7\x53\x14\x26\x07\x27\x80\xbb\x1b\x83\x04\x41\xd0\xb7\x89\x77\x37\x18\xec\xcc\xec\xc0\xf6\xce\x1e\x16\x7b\x28\x89\xd5\x2d\xc6\x14\xa9\x90\x54\x7b\x3b\x41\xde\x3d\xa8\xa2\xa4\xd6\x6f\xdb\x13\x3b\x97\x60\x75\xb2\xa8\x62\xf1\xe3\xc7\xfa\x65\x1b\x2b\xfd\x85\x7c\xd0\xce\xee\x00\x2b\x4d\xbf\x46\xb2\xfc\x16\x36\x0f\x7f\x09\x1b\xed\xb6\xc7\xb7\x19\x45\x7c\xbb\x7a\xd0\x56\xed\xe0\xa6\x0e\xd1\x95\xb7\x14\x5c\xed\x73\xfa\x86\xf6\xda\xea\xa8\x9d\x5d\x95\x14\x51\x61\xc4\xdd\x0a\x20\xf7\x84\x3c\x78\xaf\x4b\x0a\x11\xcb\x6a\x07\xb6\x36\x66\x05\x60\xb1\xa4\x1d\x3c\x98\x3a\x44\xf2\x86\x62\xd8\xb8\x8a\x3c\x46\xe7\xf9\x0f\xbb\xce\xd3\x97\x75\x89\x16\x0f\x54\x92\x8d\x1b\xed\x56\xa1\xa2\x9c\xf5\x1e\xbc\xab\xab\x1d\x3c\x67\x4a\x5a\x2a\xf0\x2c\x80\x04\xfd\xfb\x6e\x55\x19\x34\x3a\xc4\xef\x47\x1f\x3e\xe8\x90\x3e\x56\xa6\xf6\x68\x06\x48\x65\x3c\x68\x7b\xa8\x0d\xfa\xfe\x97\x15\x40\xc8\x5d\x45\x3b\xb8\x49\x63\x3c\x50\x67\xbe\xe1\xa8\xc1\x10\x22\xc6\x3a\xec\xe0\x5f\xff\x5e\x01\x1c\xd1\x68\x25\x14\xa5\x8f\xbc\x91\x77\x9f\xdf\x7f\xf9\xe3\x5d\x5e\x50\x89\x69\x10\x40\x51\xc8\xbd\xae\x44\xae\x87\x12\x3c\x55\x9e\x02\xd9\x18\x20\x77\x36\x7a\x67\x0c\xf9\x00\xce\x42\x2c\x08\x12\x11\x0a\x1a\x62\x36\xf0\x53\x41\xb6\xd1\x08\x3c\x61\xaf\x0f\xb5\x27\x75\x2d\xd2\x03\xb5\xff\xa8\xb5\xa7\x00\x08\x81\x72\x4f\x51\x38\x54\xe0\xf6\x90\x39\x17\x43\xf4\x58\xad\x8b\x3a\x5b\x3f\xd4\x19\x25\x3d\x9d\x5a\x9d\xd6\x0e\x58\x52\x62\xbe\xc2\x9c\x20\x3a\x40\x63\xdc\x23\xbc\xfb\xfc\x5e\xd4\x53\x88\x81\x47\x59\xb6\xa8\x33\xd8\x3b\x2f\x7f\x7b\x3a\x68\xd6\x2f\xa6\xd4\xea\xac\xbc\x8b\x2e\x77\x66\xd3\x8c\xc4\x13\x93\xec\xb2\xbf\x53\x1e\x57\x9d\x48\x45\x3e\xea\x96\x65\x7e\x7a\x16\xdd\x8d\x8d\xb8\xbc\x62\xb2\x93\x0c\x28\xb6\x61\x0a\x02\xe3\x98\xc6\x48\x41\x90\x83\xe0\xad\xc7\x42\x87\x33\xe3\x43\x84\x72\x76\x7b\x40\xdb\xa0\xda\xc0\x1d\x79\x56\x02\xa1\x70\xb5\x51\xcc\xf6\x91\x3c\x53\x9b\xbb\x83\xd5\xff\xec\x34\x77\x2c\x18\x8c\x14\xe2\x40\xa3\xb6\x91\xbc\x45\xc3\x66\x52\xd3\x35\xa0\x55\x50\xe2\x09\x3c\xf1\x1a\x50\xdb\x9e\x36\x11\x09\x1b\xf8\xe8\x3c\x81\xb6\x7b\xb7\x83\x22\xc6\x2a\xec\xb6\xdb\x83\x8e\xad\x0f\xe7\xae\x2c\x6b\xab\xe3\x69\x2b\xf6\xa2\xb3\x3a\x3a\x1f\xb6\x8a\x8e\x64\xb6\x41\x1f\xd6\xe8\xf3\x42\x47\xca\x63\xed\x69\x8b\x95\x5e\x0b\x70\x1b\x25\x10\x94\xea\x77\x9d\x31\x5f\xf5\x90\xa6\xf3\x08\xd1\x6b\x7b\x36\x04\xf1\xb5\x45\xde\xd9\xe1\x40\x8b\x85\xc9\xb4\x84\xff\x4c\x2f\x0f\x31\x2b\xb7\xdf\xde\xdd\x43\xbb\xa8\x1c\xc1\x90\x73\x61\xbb\xe7\x07\x67\xe2\x99\x28\x6d\xf7\xe4\xd3\xc1\xed\xbd\x2b\x45\x23\x59\x55\x39\x6d\xa3\xbc\xe4\x46\x93\x1d\x92\x1e\xea\xac\xd4\x31\xf4\xad\x74\x03\x37\x68\xad\x8b\x90\x11\xd4\x95\xc2\x48\x6a\x03\xef\x2d\xdc\x60\x49\xe6\x06\x03\xfd\xcf\x69\x67\x86\xc3\x9a\x29\x7d\x9a\xf8\x7e\x00\x1e\x0a\x0e\x3c\x06\xa0\x8d\xa6\xb3\x27\x74\x57\x51\xde\x8f\x2f\xcc\x96\xa2\xa0\x3d\x29\x50\x54\x19\x77\xe2\x08\xdb\x45\x11\x71\x07\x76\x81\x51\x70\xed\x7c\xf1\xc0\xf1\xf8\x29\x44\xf3\x7e\xcc\x4f\x13\xc3\x3e\x71\xda\x18\x7c\x18\xc1\xbe\x39\xcb\xb1\x79\x31\x6a\x8e\x42\xc9\x7f\x27\x21\x91\x7d\x2f\xa3\x94\xa6\x48\x8d\xf4\x02\xc7\xd1\xa2\xce\x36\x70\x3f\x0c\x8f\xb2\x17\x38\x90\xe5\xec\x23\x51\xd2\xa3\x55\xae\x4c\x2b\xe9\x3d\xe8\xc8\x6b\x5b\x17\x27\x1a\x03\xc5\x6b\x70\x1e\x94\x0e\xb9\x13\x33\x65\x54\x58\xf1\xb6\xbd\xc6\x48\x1d\xb2\x84\xda\x4a\x46\x08\x85\xde\x0f\xc8\x5b\x3c\x7b\x7e\x38\x73\x73\xd4\x48\x8e\xf0\xe3\xed\x87\x70\x91\xb1\x6f\x27\xe2\xe3\x63\x47\x49\x91\x12\xdf\x2a\x1d\x44\x0c\x6a\x6f\xc2\x64\x77\x1c\x9f\x72\x84\xac\xb6\xca\x48\x20\x45\x21\x02\xf3\x9c\x42\xd0\x99\xa1\x0e\x9b\x39\xc1\xfb\x96\xa7\x40\x11\xa8\xac\xe2\xe9\xba\x3d\x9e\x89\xe2\x96\x94\x02\x99\xd6\xbe\x96\x9e\xee\xda\x9b\xb4\x24\xe7\x93\x76\x46\x8e\x16\x8e\x3a\xe8\x05\xfa\xd0\x7b\x3c\x8d\xbe\xe8\x48\xe5\x84\xb2\xb1\x77\xb4\x64\x4d\xb8\xea\x33\x34\x24\x64\xa2\x11\x2e\x33\x34\x91\x5f\x70\x99\xf4\x2c\x39\x4e\x43\x20\xfe\x55\x30\xcc\x7d\x1b\x7b\xd0\xbb\x24\xda\xba\x4f\x87\x9f\x9d\x25\x77\xd6\x72\xc0\xe5\x7c\xde\xee\x74\x56\x25\x2c\x78\xdc\x06\xee\x4e\x21\x52\x09\x39\xf9\x18\x00\x3d\x41\x1d\x48\x0d\xbc\x86\x2d\x62\x7c\x5c\x7d\x06\x66\x6c\xbe\x7d\xf6\xce\x97\x18\x77\x90\x9d\xe2\x1c\xdf\xb5\x37\xcf\x60\x80\x8f\xb5\xd9\x3c\x1f\xe2\xc0\xee\xbb\xec\x31\xdc\xde\x02\x07\xed\xa6\xbf\x6e\x33\xba\xc4\x03\x7d\xae\x8d\xb9\x93\xe2\xeb\xa2\xf7\xbe\x1f\xca\x8e\xcd\xb1\x29\xdf\xa2\x83\xaa\x36\x26\x69\x0e\xe0\xf6\x13\x40\xe7\x2a\xf6\xd9\x71\xa6\xab\xee\x2e\x02\xfc\xd4\xd5\x80\xbd\x70\xdc\x15\x85\x29\x93\x24\xcf\x91\x0c\x21\xb1\xb6\x13\x99\xc0\x2c\xeb\x10\xa1\xc0\x23\x07\xa5\xca\xd3\x5e\xff\xca\x07\xf1\x66\xa1\xfe\x5f\xbf\x49\x35\xd3\xd3\x21\x79\x08\xec\x92\x4a\x81\xf9\x86\x95\x89\xdd\x76\x7b\x98\x06\xc3\x71\xc6\xbb\x48\x66\xbf\xee\x3d\x9f\xe9\x28\x41\x4f\xc8\xbd\x5d\x9a\xb5\x94\xb9\xc5\x00\xa6\xe1\x75\x9c\xc4\xfb\x68\xbe\x72\x23\x8f\xce\x3f\x3c\x7f\x03\x3f\x8d\xa5\x2f\x02\x1f\x02\x9d\xa6\xeb\xbd\xac\xfe\x15\x80\x9b\x5e\x6c\xb1\x06\x92\xcf\x63\x48\x79\xed\x3d\x17\x00\x69\xf2\xb0\xe6\x79\x79\x9d\xe3\xac\x92\x3e\xfa\x72\xd2\xbe\xba\xe9\xe4\xa4\xf3\xc3\xa6\xed\x52\x7a\xbf\x27\xdf\x14\x66\x49\xa0\xc1\x49\x81\x83\xe3\x34\xa7\x70\x6d\x7c\xc6\xbf\x81\x2f\xdc\x91\xf6\x66\x4b\xe5\xc9\x71\x7a\x07\xef\xaa\xca\x68\x52\x3b\xc8\x5d\x59\x39\x2b\x84\xb0\x2f\x4e\x94\x66\x44\x96\x8b\x1a\x96\x6e\x1b\xc2\x49\x1e\x78\x77\x44\x6d\x30\x33\x34\xd0\x97\xa4\xa7\x7e\x3f\xaa\xdb\x38\x6f\x60\xab\x40\x7c\xdc\x13\xaa\x13\xbb\xa3\x04\xea\x0d\x7c\xf6\xee\xe0\x39\xa9\xda\x43\x7f\x81\x89\xe6\x79\x78\xb2\x80\xb6\x80\x10\x3d\xda\x20\x54\x70\x4b\xc2\x5c\xd2\x06\xbe\xa1\x83\x47\x35\xa4\xe2\xb9\x9a\x95\x93\x1c\x57\x62\xcc\x8b\x81\x89\x0f\xbd\x10\xed\x5c\x3d\x6a\x4e\x6c\x39\x47\xad\x78\x5a\xc2\x20\x1b\xd6\x39\x6d\xae\x5e\xb7\xc2\x11\xab\xe9\xcc\xac\xb5\xb2\xd0\x33\x0d\x6e\x77\x38\xdd\x6a\x67\xa7\x19\xee\x05\xc5\x8a\xc1\x10\xef\x3b\xda\xef\xf5\xb4\xe4\x9f\xc1\xfb\x61\x32\xa9\x4d\x38\xac\x0e\x22\x0f\x88\xf7\xb6\xf0\x97\x52\x76\x81\x96\x8f\x4b\xfa\x45\x67\xa9\x75\x73\xae\x78\xac\x8b\xc5\x57\x67\xf3\xf6\x69\x4b\x13\x6e\x1f\xd7\x0c\x67\x46\xaa\xa4\x10\xf0\xf0\x9c\xed\x7e\x4c\x92\xa9\x85\x2e\xea\x12\xed\x9a\x3d\x40\xdc\xa1\x6c\xbf\x59\xa5\x73\x94\x56\x5a\x51\x44\x3d\x53\xb1\xa7\x07\x33\x57\xc7\x33\x57\xcd\x8e\x13\x13\xff\xd5\x6e\x3d\x61\x18\xde\xba\x2c\x6c\xe3\x56\x04\xd3\x2e\x7e\x9f\x79\x4d\xfb\x3f\x34\x93\xbb\x1b\xa1\xee\xc0\xae\x82\xc0\x5b\xd8\xc3\xcb\x41\x4f\x93\xc1\x02\xe8\x26\x2d\x34\xe6\x75\x4e\x03\x03\xb4\x1b\xf8\xc1\x4a\x25\x71\xef\x6b\xba\x5e\x00\xfd\x1d\x9a\x40\xd7\xf0\xa3\x7d\xb0\xee\x71\xc6\x89\x9e\x81\x5a\x3e\x3f\x8d\xf9\xfe\x54\x75\x0e\xc1\x53\x3a\xbc\x6d\x9f\xd4\xe1\xfe\x3a\x10\x4d\x17\xfc\x64\xc2\xfa\xdb\x59\xee\x5c\xf4\x4b\xf1\x14\xc9\x97\xda\x12\x3c\x16\x9c\x34\xac\x04\x27\xb0\x44\x8a\x7d\x6e\x26\xb5\xc8\x15\x9a\xcd\xb5\x21\xc5\x9d\x34\xb7\x84\xad\xcf\x4a\xc0\x7e\xc4\x53\xea\xab\x92\x0e\x64\x7b\xca\xe7\x76\xf6\xb2\xf8\x78\xde\x50\x63\x0e\x0f\x44\x55\xe0\x74\x91\x3f\xb4\xe4\x9e\xc9\x11\x6b\xc6\x19\x6a\x0f\xfa\x48\xf6\x7c\xc1\x15\x5c\xc2\xae\x28\xd7\x21\x91\x25\xbe\xb9\x77\x3e\x27\xd5\x5c\x3e\x05\xe9\x6a\x33\x4e\x2d\x6a\xd6\xd4\x53\x56\x69\x6f\xe4\x53\xaa\x69\x2e\x36\x27\xb0\xd3\xad\xa7\x70\x77\xd0\xb1\xa8\xb3\x4d\xee\xca\x6d\x77\xeb\xb0\xc5\x4a\x6f\x8f\x6f\x5f\x33\xbc\xa7\xcb\xfb\xa7\x4d\x56\xe4\x5a\x9b\x4d\x2f\x0d\xaf\xb1\xe0\x98\x76\x72\xf5\x95\xa7\xc4\xf8\x52\xd0\x7d\xc2\x79\x38\x9e\x9c\x19\x79\x06\xa6\xe1\x84\x41\x86\xe9\x1d\x76\x1f\xe6\x82\xe7\xcb\x29\x9f\xef\xec\x9b\x6a\x69\x3e\x40\xa7\x4d\x68\x1b\xe9\xb0\xd0\x6d\xb7\xb9\x45\xdb\xf8\xe7\x3f\xcd\x48\xd8\x99\x6b\xb3\x99\xdd\xd9\x85\x5b\xb3\x57\xe3\x7b\xb1\x65\x5c\x00\xd3\x35\x8e\x8f\x05\x79\x5a\xc6\x02\xfa\x12\x73\x17\xd2\x54\x72\xbb\x67\xa0\xe9\x3c\xb4\xa1\xe7\x7c\x25\xdd\x0b\xa6\x7d\x6c\x4b\xe7\xfe\x02\xf6\x8e\xd3\x1f\x33\x16\xd0\x36\x92\x2d\xd8\xf6\xf5\xf5\x8e\xd3\x65\x52\x66\xab\x65\xe7\x19\xe0\xf9\x61\x22\xbe\xe4\x3a\x29\x94\x0b\xb8\x99\xc6\x42\x11\x9a\x08\x8f\x3a\x16\xb3\xb1\x7c\xde\x45\x96\x9d\xc3\x93\xc1\x48\xea\x76\xf8\x03\xdd\xc2\x1e\x6e\x47\xc2\x83\x34\x96\xc2\x7e\xdf\x30\x9a\xeb\x4f\x9c\xb1\x84\x66\xd9\xf4\xc3\xcf\xa0\xfd\x7a\xd5\x0c\x35\x02\xfc\x91\x22\x8e\x5b\xd9\xde\x0f\x2b\xe9\x22\x72\xf9\x3a\x2b\x3b\xc9\xaf\x5b\xcd\x2f\xae\xff\xa7\xf9\xe0\xb7\x38\xf9\x5b\x9c\x7c\x85\x38\xd9\x02\x00\x29\x9c\x9a\x37\xb1\xfd\x75\xf3\x8f\x0f\x4d\x45\x95\xa2\xe2\x0e\xa2\xaf\x13\x11\x21\x3a\xcf\x0d\x60\x3b\x22\xde\xea\x8f\xd4\x74\x08\xdf\x69\x32\x2a\xec\x60\xcf\x7d\xc3\xea\xdc\xb0\x60\x9e\x53\x15\x49\x7d\x1a\xff\xab\xc3\x9b\x37\xf2\xd2\xfe\x17\x83\xbc\xf6\xae\x98\xe0\xe7\x5f\x56\x69\x51\x52\x5f\x5a\x98\xf0\xf3\x2f\xff\x09\x00\x00\xff\xff\xb6\x32\xcd\x90\x0c\x22\x00\x00")

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
		"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml",
	)
}

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml() (*asset, error) {
	bytes, err := klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletImage_pull_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbf\x0a\xc2\x30\x10\xc7\xf1\x3d\x4f\x71\x4f\x50\x70\xcd\xec\x22\x82\x08\x8a\xfb\x8f\xe4\x2c\xb1\xf9\x47\x72\x15\x4a\xe9\xbb\x4b\xda\xba\x75\xbe\xcf\xf7\xee\x90\xdd\x8b\x4b\x75\x29\x6a\xfa\x9e\xd4\xe0\xa2\xd5\xf4\x60\x53\x58\x54\x60\x81\x85\x40\x2b\xa2\x88\xc0\x9a\xe6\x99\xba\x4b\x40\xcf\xf7\xd1\xfb\x4d\xdd\x10\x98\x96\x65\x27\x35\xc3\xec\xee\xea\xc7\x2a\x5c\xfc\x46\xd6\x41\x73\x32\xe5\xe3\x45\xcf\x29\xaf\xe0\x7f\x91\xa8\xb3\xc9\x0c\x5c\x4c\x8a\x6f\xd7\x7f\x6a\x7b\xf1\xa0\x3b\x43\xd0\xba\x5f\x00\x00\x00\xff\xff\xb3\xa8\xd8\x2e\xca\x00\x00\x00")

func klusterletImage_pull_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletImage_pull_secretYaml,
		"klusterlet/image_pull_secret.yaml",
	)
}

func klusterletImage_pull_secretYaml() (*asset, error) {
	bytes, err := klusterletImage_pull_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/image_pull_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x4d\x4a\xc0\x30\x10\x46\xf7\x39\xc5\x5c\xa0\x15\xb7\xd9\xba\x2a\x62\x11\x05\x5d\x0f\xe9\x50\x42\x93\x49\x98\x4c\x75\x51\x7a\x77\xe9\x9f\xc1\xe2\x32\xdf\x7b\x21\x2f\x98\xfd\x07\x49\xf1\x89\x2d\xa4\x4c\x82\x9a\xa4\x4d\x99\xb8\x71\x61\x2e\x4a\xd2\x44\x64\x1c\x29\x12\x6b\xeb\xd3\xc3\xd7\xa3\x99\x3c\x0f\x16\x9e\x0f\x1c\x48\x4d\x24\xc5\x01\x15\xad\x01\x60\x8c\x64\x61\xaa\xb0\x64\x72\x1b\x10\x1a\x7d\x51\x41\xf5\x89\xbb\x88\x23\xbd\xce\x21\xbc\x6f\x10\x96\x05\xda\xb7\x3b\xee\x31\x12\xac\xab\x01\xf8\x4e\x32\xfd\x73\xe3\xf3\x9a\xab\x79\x26\xf7\x7b\xc3\xe6\xbc\xec\xed\xc3\x53\xdd\x4b\x46\x77\xda\x7c\x1d\x0f\xb7\x7e\xe8\xe6\xf9\xdf\xb7\xc9\x09\xe9\x61\x77\x7f\xc7\xb3\xe1\x27\x00\x00\xff\xff\xdb\xcb\xa0\x45\x4e\x01\x00\x00")

func klusterletKlusterletYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterletYaml,
		"klusterlet/klusterlet.yaml",
	)
}

func klusterletKlusterletYaml() (*asset, error) {
	bytes, err := klusterletKlusterletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterlet_admin_aggregate_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\xbd\x4e\xec\x30\x10\x85\x7b\x3f\xc5\xc8\xf5\x4d\xae\xe8\x90\x5b\x0a\x7a\x0a\x1a\xb4\xc5\x24\x39\xca\x5a\xb1\x3d\xd6\x78\xbc\x48\x3c\x3d\x4a\xc2\x6a\x2b\xa8\xe6\x68\xce\x8f\x3e\xae\xf1\x1d\xda\xa2\x94\x40\x3a\xf1\x3c\x72\xb7\xab\x68\xfc\x62\x8b\x52\xc6\xed\xb9\x8d\x51\xfe\xdf\x9e\xdc\x16\xcb\x12\xe8\x25\xf5\x66\xd0\x37\x49\x70\x19\xc6\x0b\x1b\x07\x47\x54\x38\x23\x90\x54\x94\x61\x3e\x23\x43\xe6\xc2\x2b\x32\x8a\x85\xed\x7c\x25\xd8\xc0\x4b\x8e\x65\xe0\x75\x55\xac\x6c\xb8\xa7\x75\x1f\x24\x4a\x3c\x21\xb5\x7d\x90\xfe\xa0\x79\xb4\x4d\xce\xc1\x40\xde\xb4\xc3\x3b\xed\x09\x2d\xb8\x81\xb8\xc6\x57\x95\x5e\x5b\xa0\x0f\x2f\x15\xca\x26\x3a\xfe\x02\x38\x46\xf1\x17\x47\xa4\x68\xd2\x75\xc6\x51\x7a\x40\xb7\xc3\xbc\x41\xa7\xc3\x58\x61\xfe\x1f\xf9\x14\xdb\x71\x3f\xd9\xe6\xeb\x2e\x66\x05\x1b\x76\xd5\xeb\xf2\xa3\xea\xdd\x5c\x90\x60\xf0\x97\xef\x00\x00\x00\xff\xff\xa9\x93\x0a\x52\x70\x01\x00\x00")

func klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterlet_admin_aggregate_clusterroleYaml,
		"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml",
	)
}

func klusterletKlusterlet_admin_aggregate_clusterroleYaml() (*asset, error) {
	bytes, err := klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet_admin_aggregate_clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\xf0\x4b\xcc\x4d\x2d\x2e\x48\x4c\x4e\xe5\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x50\xaa\xae\x56\xd0\xf3\xce\x29\x2d\x2e\x49\x2d\xca\x49\x2d\x81\x2b\x55\xa8\xad\x55\x02\x04\x00\x00\xff\xff\xeb\x15\x94\xaf\x4d\x00\x00\x00")

func klusterletNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletNamespaceYaml,
		"klusterlet/namespace.yaml",
	)
}

func klusterletNamespaceYaml() (*asset, error) {
	bytes, err := klusterletNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x6b\x1b\x31\x10\x85\xef\xfb\x2b\x06\xdf\x53\xd7\x6d\x0e\x45\xb7\x42\xa0\x0d\x2d\xe9\xd2\x84\xde\x27\xda\x57\xaf\xc8\xac\x24\x46\x63\x83\x1b\xfc\xdf\x8b\x12\x67\xa3\x25\xfe\x01\xd1\x69\x99\xf7\xde\xc7\x9b\xd9\x87\x10\x07\x47\x57\xc8\x92\x0e\x13\xa2\x75\x9c\xc3\x1f\x68\x09\x29\x3a\xe2\x9c\xcb\x7a\xbf\xe9\x26\x18\x0f\x6c\xec\x3a\xa2\xc8\x13\x1c\x3d\xc8\xae\x18\x54\x60\xa7\x51\xc9\xec\xe1\x68\xf5\xf8\x48\x1f\x7e\xcc\xe2\xcd\x8b\x42\xc7\xe3\xaa\x23\x12\xbe\x87\x94\x8a\xa1\x0a\x5f\x70\x4a\x86\xaf\x8a\x22\x4b\xf0\x5c\x1c\x6d\x3a\xa2\x02\x81\xb7\xa4\xcf\x99\x89\xcd\x8f\x3f\x1b\xc8\x5b\x0c\x91\x61\xca\xc2\x86\x53\xa4\xe9\x5e\x9f\x2c\xd2\xe7\xf2\x44\x2f\x55\x9e\xbe\xa1\xfb\xe0\xf1\xd5\xfb\xb4\x8b\x4f\x0b\xbd\xb1\x13\xf9\x14\x8d\x43\x84\xce\xe0\x8b\x73\x87\x7a\x7e\x61\xe2\x2d\x1c\xd5\x4b\xfd\xc6\x36\x14\x53\xb6\x90\xe2\xaf\x0c\x65\x4b\x7a\x5d\x65\x3a\x1e\x97\xfe\x7e\x27\xd2\x27\x09\xfe\xe0\xe8\xfa\xef\x4d\xb2\x5e\x51\xea\xff\x9a\xf7\xd0\x6d\xb3\x55\x2d\xb0\x5a\x6b\x83\xbf\x48\x27\xfe\x6a\x69\x7a\x2d\xf8\x2a\x48\xd8\x23\xa2\x94\x5e\xd3\x3d\x5a\xe8\x68\x96\xbf\xc1\xda\x11\x51\x66\x1b\x1d\xad\x47\xb0\xd8\xf8\x6f\x21\x15\x3f\xa2\x5e\xe1\xfb\xdd\x5d\x7f\xbb\x0c\x25\x35\x47\x5f\x2e\x2f\x3f\x37\xe3\x10\x83\x05\x96\x2b\x08\x1f\x6e\xe1\x53\x1c\x8a\xa3\x4f\x8d\x21\x43\x43\x1a\x66\x69\xf3\x71\xd6\x14\x3c\x84\xf7\xd3\xf9\x7f\x00\x00\x00\xff\xff\xc8\xab\x89\x51\x57\x03\x00\x00")

func klusterletOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletOperatorYaml,
		"klusterlet/operator.yaml",
	)
}

func klusterletOperatorYaml() (*asset, error) {
	bytes, err := klusterletOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\x31\x0b\xc2\x30\x10\xc5\xf1\xfd\x3e\xc5\xd1\x5d\xc1\xf5\x36\x47\x11\x44\x28\xb8\x1f\xe9\x43\x8e\xa6\x69\x49\x2e\x5d\x4a\xbe\xbb\x14\xaa\xe0\xfa\x7e\xfc\x9f\x2e\xf6\x42\x2e\x36\x27\xe1\xf5\x42\xa3\xa5\x41\xb8\x47\x5e\x2d\xe0\x1a\xc2\x5c\x93\xd3\x04\xd7\x41\x5d\x85\x98\x93\x4e\x10\x1e\x63\x2d\x8e\x1c\xe1\xc7\x54\x16\x0d\x10\xee\xb6\x8d\xcf\xf7\x1f\x3e\xbe\xc2\xad\x75\x64\x93\xbe\xf1\xac\x31\xf6\x08\x19\x5e\x84\x4e\xc7\xdd\x5e\xdd\xfe\x75\x4f\xb9\x35\xfa\x04\x00\x00\xff\xff\x57\x39\x94\xee\xa0\x00\x00\x00")

func klusterletService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletService_accountYaml,
		"klusterlet/service_account.yaml",
	)
}

func klusterletService_accountYaml() (*asset, error) {
	bytes, err := klusterletService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/service_account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hub/managedcluster/manifests/managedcluster-clusterrole.yaml":                     hubManagedclusterManifestsManagedclusterClusterroleYaml,
	"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml":              hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
	"hub/managedcluster/manifests/managedcluster-service-account.yaml":                 hubManagedclusterManifestsManagedclusterServiceAccountYaml,
	"klusterlet/bootstrap_secret.yaml":                                                 klusterletBootstrap_secretYaml,
	"klusterlet/cluster_role.yaml":                                                     klusterletCluster_roleYaml,
	"klusterlet/cluster_role_binding.yaml":                                             klusterletCluster_role_bindingYaml,
	"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
	"klusterlet/image_pull_secret.yaml":                                                klusterletImage_pull_secretYaml,
	"klusterlet/klusterlet.yaml":                                                       klusterletKlusterletYaml,
	"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml":                           klusterletKlusterlet_admin_aggregate_clusterroleYaml,
	"klusterlet/namespace.yaml":                                                        klusterletNamespaceYaml,
	"klusterlet/operator.yaml":                                                         klusterletOperatorYaml,
	"klusterlet/service_account.yaml":                                                  klusterletService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hub": &bintree{nil, map[string]*bintree{
		"managedcluster": &bintree{nil, map[string]*bintree{
			"manifests": &bintree{nil, map[string]*bintree{
				"managedcluster-clusterrole.yaml":        &bintree{hubManagedclusterManifestsManagedclusterClusterroleYaml, map[string]*bintree{}},
				"managedcluster-clusterrolebinding.yaml": &bintree{hubManagedclusterManifestsManagedclusterClusterrolebindingYaml, map[string]*bintree{}},
				"managedcluster-service-account.yaml":    &bintree{hubManagedclusterManifestsManagedclusterServiceAccountYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"klusterlet": &bintree{nil, map[string]*bintree{
		"bootstrap_secret.yaml":     &bintree{klusterletBootstrap_secretYaml, map[string]*bintree{}},
		"cluster_role.yaml":         &bintree{klusterletCluster_roleYaml, map[string]*bintree{}},
		"cluster_role_binding.yaml": &bintree{klusterletCluster_role_bindingYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": &bintree{klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml, map[string]*bintree{}},
		}},
		"image_pull_secret.yaml":                      &bintree{klusterletImage_pull_secretYaml, map[string]*bintree{}},
		"klusterlet.yaml":                             &bintree{klusterletKlusterletYaml, map[string]*bintree{}},
		"klusterlet_admin_aggregate_clusterrole.yaml": &bintree{klusterletKlusterlet_admin_aggregate_clusterroleYaml, map[string]*bintree{}},
		"namespace.yaml":                              &bintree{klusterletNamespaceYaml, map[string]*bintree{}},
		"operator.yaml":                               &bintree{klusterletOperatorYaml, map[string]*bintree{}},
		"service_account.yaml":                        &bintree{klusterletService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
