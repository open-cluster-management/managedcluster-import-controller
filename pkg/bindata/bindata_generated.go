// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/hub/managedcluster/manifests/managedcluster-clusterrole.yaml
// resources/hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml
// resources/hub/managedcluster/manifests/managedcluster-service-account.yaml
// resources/klusterlet/bootstrap_secret.yaml
// resources/klusterlet/cluster_role.yaml
// resources/klusterlet/cluster_role_binding.yaml
// resources/klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml
// resources/klusterlet/image_pull_secret.yaml
// resources/klusterlet/klusterlet.yaml
// resources/klusterlet/namespace.yaml
// resources/klusterlet/operator.yaml
// resources/klusterlet/service_account.yaml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hubManagedclusterManifestsManagedclusterClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x58\x69\x10\x1b\xba\x0d\x31\x30\xc1\xc0\xc0\x82\x3a\xb8\xa9\x49\xad\xde\x9d\x83\xed\x6b\x05\x55\xff\x3b\x6a\x93\x81\xaa\x64\x7a\x27\xbd\x4f\xe7\xf7\x1e\x0e\xfc\x4e\x6a\x2c\x25\x82\xae\xb0\x6b\xb1\xfa\x46\x94\x7f\xd0\x59\x4a\xbb\x7d\xb0\x96\xe5\x6e\x77\x1f\xb6\x5c\xd6\x11\x9e\x52\x35\x27\x7d\x93\x44\x21\x93\xe3\x1a\x1d\x63\x00\x28\x98\x29\x82\x7d\x9b\x53\x8e\x32\x50\x59\x74\x23\xb9\xc8\x58\xb0\xa7\x4c\xc5\xe3\xf8\x5c\x4f\x4e\x5c\x89\xb8\xb9\xe2\x10\x0f\x07\x68\x5f\x46\x73\x3a\xf0\x8a\x99\xe0\x78\x0c\x5a\x13\x59\x0c\x37\xf0\x98\x92\xec\x61\xfa\x01\xb0\xa7\xe2\xe0\x02\x2a\x8e\x4e\xc0\x6e\xd0\x91\x3a\x7f\x72\x87\x4e\x61\x01\x38\xf0\xb3\x4a\x1d\x2c\xc2\x47\xf3\xc7\xb2\xa9\x52\xb3\x0c\x00\x4a\x26\x55\x3b\xba\x82\xb8\x2f\x5c\x7a\xa5\xaf\x4a\xe6\x76\x66\x77\xa4\xab\x91\x53\x42\xa7\xe6\x16\x9a\x9e\xfc\x24\x89\xed\xac\x7b\xf4\x6e\xd3\x2c\xe7\xc3\xf6\xe4\x57\xc9\xc6\xba\xed\xcc\x64\xff\x06\xbd\x9c\xd1\x2e\x80\xd3\x6e\x67\x68\x76\xd2\xcb\x32\xa7\x0a\xcb\xf0\x1b\x00\x00\xff\xff\x88\xb9\xb0\x2d\x05\x02\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterroleYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrole.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterroleYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8e\xb1\x4e\xc3\x40\x0c\x86\xf7\x7b\x8a\x7b\x81\x04\xb1\x21\x6f\x94\x81\x09\x86\x22\xb1\x3b\x17\x53\x4c\x73\xf6\xe9\xec\xab\x04\x55\xdf\x1d\x85\xa4\x48\xa8\x12\x5b\x37\x4b\xff\xe7\xff\xfb\xb1\xf0\x2b\x55\x63\x15\x88\x75\xc0\xd4\x63\xf3\x77\xad\xfc\x85\xce\x2a\xfd\xfe\xce\x7a\xd6\x9b\xc3\x6d\xd8\xb3\x8c\x10\x1f\xa6\x66\x4e\x75\xab\x13\x6d\x58\x46\x96\x5d\xc8\xe4\x38\xa2\x23\x84\x18\x05\x33\x41\xb4\x4f\x73\xca\xa0\x85\xa4\x4b\xcb\x43\x97\x51\x70\x47\x99\xc4\x61\x39\xc7\x35\x81\x41\xd5\xcd\x2b\x16\x38\x1e\x63\xff\xb4\x84\xab\xe7\x19\x33\xc5\xd3\x29\x54\x9d\x68\x4b\x6f\xb3\x02\x0b\x3f\x56\x6d\xe5\x9f\xb9\x21\xc6\x8b\xb5\x57\x1c\x67\x6d\xf8\xa0\xe4\x06\xa1\x5b\xbd\x2f\x54\x0f\x9c\xe8\x3e\x25\x6d\xe2\xbf\xea\xb9\x62\x73\x2e\xfc\xcb\x9c\xbb\x16\xd4\x0a\xa6\x95\xbf\x54\xfe\x84\x33\xfb\x1d\x00\x00\xff\xff\x8e\x12\x91\x7d\xbb\x01\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterrolebindingYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcb\xb1\x0a\xc2\x30\x14\x85\xe1\x3d\x4f\x71\xe9\x03\x08\xae\xd9\xd4\xd9\x2e\x82\xfb\x21\x39\x48\xd0\xdc\x84\xe4\xb6\x4b\xe9\xbb\x0b\x62\x86\xce\xff\xf7\xa3\xa6\x27\x5b\x4f\x45\xbd\xac\x67\xf7\x4e\x1a\xbd\x3c\xd8\xd6\x14\x78\x09\xa1\x2c\x6a\x2e\xd3\x10\x61\xf0\x4e\x44\x91\xe9\x65\xda\x36\x39\x5d\x4b\xb1\x6e\x0d\xf5\xc8\x67\x64\xca\xbe\x4f\x7f\xdc\x2b\xc2\x38\xee\x50\xbc\x18\x6f\x9f\xa5\x1b\xdb\x3c\xea\x4f\x7f\x03\x00\x00\xff\xff\xfa\x75\x6d\xe8\x89\x00\x00\x00")

func hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterServiceAccountYaml,
		"hub/managedcluster/manifests/managedcluster-service-account.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterServiceAccountYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletBootstrap_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xb1\x0a\xc2\x30\x14\x45\xf7\x7c\xc5\x23\x7b\x05\xd7\x8c\xae\x05\x1d\x04\xf7\x97\xf4\xaa\xa1\x6d\x12\x93\x17\x41\x4a\xff\x5d\x94\x46\xe7\x7b\xce\xb9\x9c\xfc\x05\xb9\xf8\x18\x0c\x3d\xf7\x6a\xf4\x61\x30\x74\x86\xcb\x10\x35\x43\x78\x60\x61\xa3\x88\x02\xcf\x30\xa4\x6d\x8c\x52\x24\x73\xea\xee\xd5\x76\x63\xb5\x70\x31\x5c\xfd\x4d\x6f\x48\x49\xec\x3e\xdc\xb2\xd0\xae\x9f\x6a\x11\xe4\x09\x72\x6c\x0b\xad\xab\x56\xf2\x4a\x30\x74\x4a\xfc\xa8\x50\xad\xff\x4f\x6d\xf6\xa1\x3d\xf5\xbf\xe5\x6b\xbf\x03\x00\x00\xff\xff\x3c\x92\x16\x61\xb1\x00\x00\x00")

func klusterletBootstrap_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletBootstrap_secretYaml,
		"klusterlet/bootstrap_secret.yaml",
	)
}

func klusterletBootstrap_secretYaml() (*asset, error) {
	bytes, err := klusterletBootstrap_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/bootstrap_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x3d\x8f\xdb\x30\x0c\xdd\xfd\x2b\x04\x77\xbd\xf8\xd0\xad\xf0\x56\x74\xe8\xde\xa1\x4b\x91\x81\x91\x5f\x73\x6a\x64\x51\x20\x29\x07\xed\xaf\x2f\xfc\xd1\x5c\xce\x4e\xd0\x02\xbd\xe1\x26\x7d\x50\x7c\x7c\xef\x89\xa4\x1c\xbe\x42\x34\x70\x6a\x9d\x1c\xc8\x37\x54\xec\x89\x25\xfc\x22\x0b\x9c\x9a\xd3\x07\x6d\x02\x3f\x0e\xef\xab\x53\x48\x5d\xeb\x3e\xc5\xa2\x06\xf9\xc2\x11\x55\x0f\xa3\x8e\x8c\xda\xca\xb9\x44\x3d\x5a\x77\x9a\xa3\x11\x56\x49\x89\xd0\xb6\x7a\xe7\x3e\xc6\xc8\xe7\xab\x88\x33\x76\x5e\x40\x06\x77\x66\x39\x45\xa6\xae\xda\x39\xca\xe1\xb3\x70\xc9\xda\xba\x6f\x75\xbd\xaf\x9c\x13\x28\x17\xf1\x98\x6e\x14\x5e\x60\x5a\x3f\xb8\xda\x73\xfa\x1e\x8e\x3d\xe5\xe9\xa4\x90\x21\x78\x90\xf7\x5c\x92\xe9\x94\x39\x40\x0e\x53\xd6\x5c\x66\x7c\x76\x84\x8d\x4b\x0c\x3a\xad\x25\x77\x4b\xe0\x4c\xe6\x9f\xc6\x4d\xfe\xb3\xe9\x10\x61\xa8\xf7\x6b\x52\xb7\x7c\xb9\x41\xb4\x1c\x7e\xc0\x1b\x79\x0f\x55\xc1\x10\x70\xbe\x4d\x6a\x83\xbf\xc5\x1a\x3d\xd5\x4c\x1e\x2b\x84\x95\x98\x45\xc2\x7d\xe0\x07\x57\x63\x40\x32\xbd\xcb\x7a\x0e\xbf\xa8\xf2\xec\xdd\xc5\x99\xc5\xb5\xad\x33\x39\xeb\x16\xb3\x43\x8e\xfc\xb3\xdf\x00\xbf\xee\xaf\xdc\x6d\xd9\x2d\x21\x3f\xb7\xa0\x70\xc4\x21\xa4\x2e\xa4\xe3\xd4\x41\x2f\xce\x6f\x8d\xe8\x85\xe1\x2b\x52\x1b\xdb\x41\x3d\xc5\xe5\xdd\xa8\xbd\xde\x5f\x06\x35\x15\x1f\x0b\x74\x9c\xd2\x9e\x12\x1d\x71\x3d\xba\x94\x83\x36\x6b\x65\x9c\x21\x64\x2c\x0d\x67\xa4\xdd\x42\x7e\x37\x27\x8f\xdf\x7f\x53\xe3\x33\xe8\x3f\x35\xf7\xb5\xb0\xbf\x5a\xfd\xbf\x84\x1e\xd5\xc8\xca\x8a\xd7\xba\xfe\xbe\xfa\x1d\x00\x00\xff\xff\xa1\x25\x7d\xa3\x3a\x05\x00\x00")

func klusterletCluster_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_roleYaml,
		"klusterlet/cluster_role.yaml",
	)
}

func klusterletCluster_roleYaml() (*asset, error) {
	bytes, err := klusterletCluster_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8d\xb1\x6e\xc3\x30\x0c\x05\x77\x7d\x05\xe1\xbd\x2a\xba\x15\xda\xda\x0e\x1d\x0a\x74\x70\x81\xee\xb4\xcc\x24\x8c\x65\x51\x90\x28\x0f\x31\xfc\xef\x41\xe0\x24\x4b\x8c\xac\x3c\xde\x3b\x4c\xfc\x4f\xb9\xb0\x44\x07\xb9\x43\x6f\xb1\xea\x41\x32\x9f\x50\x59\xa2\x1d\xde\x8b\x65\x79\x9d\xde\xcc\xc0\xb1\x77\xf0\x15\x6a\x51\xca\xad\x04\xfa\xe4\xd8\x73\xdc\x9b\x91\x14\x7b\x54\x74\x06\x20\xe2\x48\x0e\x86\xf5\x29\x90\x9a\x2c\x81\x5a\xda\x5d\x18\x26\xfe\xce\x52\xd3\x93\x8e\x01\x78\xc8\x6c\xad\x96\xda\x1d\xc9\x6b\x71\xe6\xe5\x2a\xfc\x51\x9e\xd8\xd3\x87\xf7\x52\xa3\x6e\x39\xeb\xa9\x24\xf4\xe4\xa0\x99\x67\xb0\x3f\x77\xf8\x7b\x23\xb0\x2c\x8d\x39\x07\x00\x00\xff\xff\xdc\x27\xb7\x62\x13\x01\x00\x00")

func klusterletCluster_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_role_bindingYaml,
		"klusterlet/cluster_role_binding.yaml",
	)
}

func klusterletCluster_role_bindingYaml() (*asset, error) {
	bytes, err := klusterletCluster_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x6e\xe4\xb8\x11\xbe\xf7\x53\x14\x9c\x83\x13\xc0\x2d\x63\x90\x4b\xd0\x37\xc7\xbb\x0b\x18\x3b\x3b\x19\xd8\xde\xd9\xc3\x62\x0f\x25\xb1\xd4\x62\x4c\x91\x0a\x8b\xec\xd9\x4e\x90\x77\x0f\x8a\x94\xd4\xfa\xe9\xf6\x78\x32\x89\x4e\xdd\x64\xb1\xf8\xd5\xc7\xfa\x23\xb1\xd3\x9f\xc8\xb3\x76\x76\x07\xd8\x69\xfa\x3d\x90\x95\x7f\x5c\xbc\xfc\x85\x0b\xed\x6e\x0f\xef\x4a\x0a\xf8\x6e\xf3\xa2\xad\xda\xc1\x7d\xe4\xe0\xda\x47\x62\x17\x7d\x45\xdf\x51\xad\xad\x0e\xda\xd9\x4d\x4b\x01\x15\x06\xdc\x6d\x00\x2a\x4f\x28\x83\xcf\xba\x25\x0e\xd8\x76\x3b\xb0\xd1\x98\x0d\x80\xc5\x96\x76\xf0\x62\x22\x07\xf2\x86\x02\x17\xae\x23\x8f\xc1\x79\xf9\x61\xb7\x55\x9e\xd9\xb6\x68\x71\x4f\x2d\xd9\x50\x68\xb7\xe1\x8e\x2a\xd1\xbb\xf7\x2e\x76\x3b\x78\xcb\x92\xbc\x15\xcb\x2a\x80\x0c\xfd\xc7\x71\xd7\x34\x68\x34\x87\x1f\x17\x13\xef\x35\xe7\xc9\xce\x44\x8f\x66\x86\x34\x8d\xb3\xb6\xfb\x68\xd0\x4f\x67\x36\x00\x5c\xb9\x8e\x76\x70\x9f\xc7\x64\x20\x96\xbe\xe7\xa8\xc7\xc0\x01\x43\xe4\x1d\xfc\xeb\xdf\x1b\x80\x03\x1a\xad\x12\x45\x79\x52\x0c\xb9\xfb\xf8\xf0\xe9\xcf\x4f\x55\x43\x2d\xe6\x41\x00\x45\x5c\x79\xdd\x25\xb9\x09\x4a\xf0\xd4\x79\x62\xb2\x81\xa1\x72\x36\x78\x67\x0c\x79\x06\x67\x21\x34\x04\x99\x08\x05\x3d\x31\x05\xfc\xd2\x90\xed\x35\x82\x2c\xa8\xf5\x3e\x7a\x52\x37\x49\x7a\xa6\xf6\x1f\x51\x7b\x62\x40\x60\xaa\x3c\x85\xc4\xa1\x02\x57\x43\xe9\x5c\xe0\xe0\xb1\xdb\x36\xb1\xdc\xbe\xc4\x92\xb2\x9e\x51\xad\xce\x7b\x33\xb6\x94\x99\xef\xb0\x22\x08\x0e\xd0\x18\xf7\x19\xee\x3e\x3e\x24\xf5\xc4\x81\x65\x54\x64\x9b\x58\x42\xed\x7c\xfa\xed\x69\xaf\x45\x7f\x72\xa5\x41\x67\xe7\x5d\x70\x95\x33\x45\x3f\x12\x8e\x42\xb2\x2b\xff\x4e\x55\xd8\x8c\x22\x1d\xf9\xa0\x07\x96\xe5\x9b\x78\xf4\x38\xb6\xe0\xf2\x5a\xc8\xce\x32\xa0\xc4\x87\x89\x13\x8c\x43\x1e\x23\x05\x9c\x0e\x42\x4c\x0f\x8d\xe6\x13\xe3\x73\x84\xe9\xec\x6a\x40\xdb\xa3\x2a\xe0\x89\xbc\x28\x01\x6e\x5c\x34\x4a\xd8\x3e\x90\x17\x6a\x2b\xb7\xb7\xfa\x9f\xa3\xe6\x91\x05\x83\x81\x38\xcc\x34\x6a\x1b\xc8\x5b\x34\xe2\x26\x91\x6e\x00\xad\x82\x16\x8f\xe0\x49\xf6\x80\x68\x27\xda\x92\x08\x17\xf0\x93\xf3\x04\xda\xd6\x6e\x07\x4d\x08\x1d\xef\x6e\x6f\xf7\x3a\x0c\x31\x5c\xb9\xb6\x8d\x56\x87\xe3\x6d\xf2\x17\x5d\xc6\xe0\x3c\xdf\x2a\x3a\x90\xb9\x65\xbd\xdf\xa2\xaf\x1a\x1d\xa8\x0a\xd1\xd3\x2d\x76\x7a\x9b\x80\xdb\x90\x12\x41\xab\xfe\x30\x3a\xf3\xf5\x04\x69\x3e\x0f\x0e\x5e\xdb\x93\x23\xa4\x58\xbb\xc8\xbb\x04\x1c\xe8\xe4\x61\x69\x59\xc6\x7f\xa2\x57\x86\x84\x95\xc7\xef\x9f\x9e\x61\xd8\x34\x1d\xc1\x9c\xf3\xc4\xf6\x24\x0e\x4e\xc4\x0b\x51\xda\xd6\xe4\xf3\xc1\xd5\xde\xb5\x49\x23\x59\xd5\x39\x6d\x43\xfa\x53\x19\x4d\x76\x4e\x3a\xc7\xb2\xd5\x81\xa7\x5e\x5a\xc0\x3d\x5a\xeb\x02\x94\x04\xb1\x53\x18\x48\x15\xf0\x60\xe1\x1e\x5b\x32\xf7\xc8\xf4\x7f\xa7\x5d\x18\xe6\xad\x50\xfa\x65\xe2\xa7\x09\x78\x2e\x38\x8b\x18\x80\x21\x9b\x9e\x3d\xa1\xa7\x8e\xaa\x69\x7e\x11\xb6\x14\xb1\xf6\xa4\x40\x51\x67\xdc\x51\x32\xec\x98\x45\x52\x38\x48\x08\x2c\x92\xeb\x18\x8b\x7b\xc9\xc7\x5f\x42\x74\x3e\x8e\xe5\xeb\x73\xd8\x07\x29\x1b\xb3\x89\x05\xec\xfb\x93\x9c\xb8\x97\xa0\x96\x2c\x94\xe3\x77\x95\x12\x25\xf6\x4a\xca\x65\x8a\xd4\x42\x2f\x48\x1e\x6d\x62\x59\xc0\xf3\x3c\x3d\x26\x5b\x60\x4f\x56\xaa\x4f\xca\x92\x1e\xad\x72\x6d\xde\x49\xd7\xa0\x83\xec\x6d\x5d\x58\x69\x64\x0a\x37\xe0\x3c\x28\xcd\x95\x4b\x6e\x2a\xa8\xb0\x13\xb3\xbd\xc6\x40\x23\xb2\x8c\xda\xa6\x8a\xc0\x8d\xae\x67\xe4\x5d\x3c\x7b\xf9\xa4\x72\x4b\xd6\xc8\x81\xf0\xf3\xe3\x7b\x7e\x95\xb1\xef\x57\xe2\xcb\x63\xc7\x54\x22\x53\x7e\xeb\x34\x27\x31\x88\xde\xf0\xca\x3a\xc9\x4f\x15\x42\x19\xad\x32\x29\x91\x62\x22\x02\xab\x8a\x98\x75\x69\x68\xc4\x66\x8e\xf0\x30\xf0\xc4\x14\x80\xda\x2e\x1c\x6f\x86\xe3\x59\x29\x1e\x48\x69\x50\x68\x9d\x6a\x99\xe8\x8e\xde\xe4\x2d\xa5\x9e\x0c\x2b\x2a\xb4\x70\xd0\xac\x2f\xd0\x87\xde\xe3\x71\x31\xa3\x03\xb5\x2b\xca\x96\xd1\x31\x90\xb5\xe2\x6a\xca\xd0\x9c\x90\x95\x46\x78\x9d\xa1\x95\xfc\x85\x90\xc9\xdf\xa5\xc0\xe9\x09\xc4\xbf\x26\x0c\xe7\xe6\x96\x11\x74\x97\x45\x87\xf0\x19\xf1\x4b\xb0\x54\xce\x5a\x49\xb8\x52\xcf\x07\x4b\xcf\xaa\x84\x0b\x11\x57\xc0\xd3\x91\x03\xb5\x50\x91\x0f\x0c\xe8\x09\x22\x93\x9a\x45\x8d\x78\xc4\xf2\xb8\xa6\x0c\x9c\xf1\xf9\xe1\xab\x9d\x6f\x31\xec\xa0\x3c\x86\x73\x7c\x47\x6f\xde\xc0\x80\x1c\x6b\x6f\xbc\x1c\xe2\xcc\xef\xc7\xea\x31\x37\xef\x02\x07\x83\xd1\x5f\x67\xcc\xd8\x36\xbd\x1a\xb7\x1f\xc6\xe6\x6a\x92\xe7\xc6\x6e\x2b\xa7\xe8\xec\x92\x29\xf5\xa6\x24\x36\x8a\xac\x00\xb5\x91\x03\x34\x78\x90\x68\xef\x3c\xd5\xfa\x77\xb1\xf0\xea\x42\x63\xbd\xbd\xca\xcd\xc8\x97\x73\xdd\x1c\xd8\x6b\x2a\x13\xcc\x2b\x51\x96\x1c\x62\xb4\x61\x9d\x65\x96\xa5\xe4\x55\x32\xa7\x0d\xe5\x43\x8b\x7b\xfa\x18\x8d\x79\x5a\x54\xbe\x15\xb9\x8f\x97\x56\x5d\x2a\x89\x5a\x84\xd6\x79\x6b\x59\x1d\xa7\x68\xbe\xd2\x90\xcf\xce\xbf\xbc\xdd\x80\x5f\x96\xd2\xaf\x02\x9f\x03\x5d\xd7\xc1\x3a\xed\xfe\x15\x80\xfb\x4b\xce\xc5\xe6\x22\x4d\x2f\x21\x55\xd1\x7b\xa9\xac\x79\xf1\xbc\x99\xf8\xf6\x06\xc2\x59\x95\x2e\xa8\xaf\x57\xc3\xeb\xfb\x51\x2e\x5d\xa9\xb0\xbf\xcf\x28\x5d\xd7\xe4\xfb\x8e\x27\x0b\xf4\x38\x89\x25\xeb\xac\x93\xb5\x34\x9d\x27\xfc\x05\x7c\x92\xab\xde\x64\x75\x6a\xe9\x24\x01\xee\xe0\xae\xeb\x8c\x26\xb5\x83\xca\xb5\x9d\xb3\x89\x10\x89\xc5\x95\xd2\x92\xc8\x4a\xb7\x20\xd2\xc3\x4d\x6b\x95\x60\xef\x0e\xa8\x0d\x96\x86\x66\xfa\xb2\xf4\x3a\xee\x17\x0d\x91\x24\x64\x1c\x14\xa4\x18\xf7\x84\xea\x28\xe1\x98\x32\x60\x01\x1f\xbd\xdb\x7b\xa9\x56\x76\x3f\xdd\x60\xa5\xf9\x3c\xbc\xb4\x81\xb6\x80\x10\x3c\x5a\x4e\x54\x48\xaf\x2f\x5c\x52\x01\xdf\xd1\xde\xa3\x9a\x53\xf1\x56\xcd\xca\xa5\xe2\xd1\x62\xa8\x9a\x99\x8b\xcf\xa3\x10\xed\xb9\x46\xcf\x1c\xc5\x73\x0e\x5a\xc9\xb2\x8c\x21\x19\xac\x2b\x2a\xae\xff\xb7\xad\x43\xf2\x9a\xd1\xcd\x06\x2f\xe3\x89\x6b\xc8\x3d\x42\xea\x98\x76\x76\x5d\x3a\xbe\xa1\x0b\x30\xc8\xe1\x79\xa4\xfd\x59\xaf\x7b\xe9\x33\x78\xdf\xaf\x16\x0d\x05\x47\xd4\x41\x90\x81\x14\xbd\x03\xfc\x4b\xb5\xb0\x41\x2b\xc7\x95\x2e\x62\xce\xd2\x10\xe6\xd2\x4a\x58\x17\x9a\xaf\x2e\x93\xc3\x37\xd4\x7c\xb9\x97\x6d\x05\xce\x19\xa9\x96\x98\x71\xff\x16\x73\x7f\xca\x92\xf9\x6e\xda\xc4\x16\xed\x56\x22\x20\x85\x43\x3b\xcc\x59\xa5\x2b\x4c\x77\x54\x45\x01\xf5\x99\x56\x38\x7f\x58\xba\x18\x4e\x5c\xf5\x16\x67\x26\xfe\x2b\x6b\x3d\x21\xcf\x9f\x33\x2e\x98\xf1\x98\x04\xb3\x15\x7f\x2c\xbd\xa6\xfa\x4f\xfd\xe2\xf1\xa9\x65\x3c\xb0\x6b\x4e\xf0\x2e\xd8\xf0\xed\xa0\xd7\xc5\xe0\x02\xe8\xbe\x2c\xf4\xee\x75\x2a\x03\x33\xb4\x05\xfc\xcd\xa6\x4e\xe2\xd9\x47\xba\xb9\x00\xfa\x07\x34\x4c\x37\xf0\xb3\x7d\xb1\xee\xf3\x99\x20\x7a\x03\xea\x34\xfd\x65\xcc\xcf\xc7\x6e\x0c\x08\x59\x32\xe2\x1d\x2e\x20\x23\xee\xb7\x80\x38\x0c\x2f\xb0\x87\x77\xa7\x7f\x89\xba\x6d\xff\x64\x9a\x26\x20\x27\x63\xb5\x83\xe0\x23\xf5\xcf\x8a\xce\x8b\x87\x0f\x23\xa9\xb2\xfa\x03\xf5\x14\xfc\xa0\xc9\x28\xde\x41\x2d\xc4\x6c\x4e\x27\x22\x37\x8f\x2e\x90\xfa\xb0\x7c\x24\xbd\xba\x9a\xbd\x7f\xa6\xbf\x93\x1a\x0a\xbf\xfe\xb6\xc9\x9b\x92\xfa\x34\xc0\x84\x5f\x7f\xfb\x4f\x00\x00\x00\xff\xff\x51\x39\xdf\x85\x46\x16\x00\x00")

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
		"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml",
	)
}

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml() (*asset, error) {
	bytes, err := klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletImage_pull_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbf\x0a\xc2\x30\x10\xc7\xf1\x3d\x4f\x71\x4f\x50\x70\xcd\xec\x22\x82\x08\x8a\xfb\x8f\xe4\x2c\xb1\xf9\x47\x72\x15\x4a\xe9\xbb\x4b\xda\xba\x75\xbe\xcf\xf7\xee\x90\xdd\x8b\x4b\x75\x29\x6a\xfa\x9e\xd4\xe0\xa2\xd5\xf4\x60\x53\x58\x54\x60\x81\x85\x40\x2b\xa2\x88\xc0\x9a\xe6\x99\xba\x4b\x40\xcf\xf7\xd1\xfb\x4d\xdd\x10\x98\x96\x65\x27\x35\xc3\xec\xee\xea\xc7\x2a\x5c\xfc\x46\xd6\x41\x73\x32\xe5\xe3\x45\xcf\x29\xaf\xe0\x7f\x91\xa8\xb3\xc9\x0c\x5c\x4c\x8a\x6f\xd7\x7f\x6a\x7b\xf1\xa0\x3b\x43\xd0\xba\x5f\x00\x00\x00\xff\xff\xb3\xa8\xd8\x2e\xca\x00\x00\x00")

func klusterletImage_pull_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletImage_pull_secretYaml,
		"klusterlet/image_pull_secret.yaml",
	)
}

func klusterletImage_pull_secretYaml() (*asset, error) {
	bytes, err := klusterletImage_pull_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/image_pull_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x31\x8b\xc3\x30\x0c\x85\x77\xff\x0a\xfd\x81\x24\xdc\xea\xf5\xa6\xe3\x68\x29\x14\xba\x8b\x44\x04\x13\xdb\x72\x65\xa5\xa5\x84\xfc\xf7\xe2\x24\x90\x76\xe8\xd0\x51\xfa\xde\x7b\xd2\xc3\xe4\x2e\x24\xd9\x71\xb4\xc0\x89\x04\x95\xa5\xe6\x44\xb1\x6a\xfd\x98\x95\xa4\x0a\x18\xb1\xa7\x40\x51\x6b\xc7\xcd\xed\xc7\x0c\x2e\x76\x16\xfe\x57\xec\x49\x4d\x20\xc5\x0e\x15\xad\x01\x88\x18\xc8\xc2\xb0\xc3\x9c\xa8\x2d\x40\xa8\x77\x59\x05\xd5\x71\xfc\x0b\xd8\xd3\x69\xf4\xfe\x5c\x20\x5c\x47\x7c\x94\xec\x0f\x67\x9b\x57\xab\x01\xb8\xb3\x0c\x5f\x26\x14\x8b\x01\xd8\xc8\x71\xf9\x71\x9a\xa0\x3e\x2c\x92\xee\x77\xdf\xe7\x84\x2d\xc1\x3c\x6f\x55\x96\x71\xd5\xee\x85\xdf\x74\xcf\x00\x00\x00\xff\xff\xea\x36\xfd\xc3\x41\x01\x00\x00")

func klusterletKlusterletYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterletYaml,
		"klusterlet/klusterlet.yaml",
	)
}

func klusterletKlusterletYaml() (*asset, error) {
	bytes, err := klusterletKlusterletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\xf0\x4b\xcc\x4d\x2d\x2e\x48\x4c\x4e\xe5\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\x50\xaa\xae\x56\xd0\xf3\xce\x29\x2d\x2e\x49\x2d\xca\x49\x2d\x81\x2b\x55\xa8\xad\x55\x02\x04\x00\x00\xff\xff\xeb\x15\x94\xaf\x4d\x00\x00\x00")

func klusterletNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletNamespaceYaml,
		"klusterlet/namespace.yaml",
	)
}

func klusterletNamespaceYaml() (*asset, error) {
	bytes, err := klusterletNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x51\x4d\x6b\xdc\x30\x10\xbd\xfb\x57\x0c\x7b\xdf\xb8\xdb\xe6\x50\x74\x2b\x04\xda\xd2\x12\x0c\x09\xbd\x4f\xe4\xd7\xf5\x90\xb1\xa4\x4a\xe3\x85\x6d\xc8\x7f\x2f\xca\x26\x8e\xdd\xec\x0f\x88\x4e\x62\xde\x07\xef\xcd\xdc\x4b\xe8\x1d\x5d\x21\x69\x3c\x8e\x08\xd6\x70\x92\x5f\xc8\x45\x62\x70\xc4\x29\x95\xf6\xb0\x6b\x46\x18\xf7\x6c\xec\x1a\xa2\xc0\x23\x1c\xdd\xeb\x54\x0c\x59\x61\xcf\xa3\x92\xd8\xc3\xd1\xe6\xe1\x81\x2e\x7e\xcc\xe0\xf5\x0b\x42\x8f\x8f\x9b\x86\x48\xf9\x0e\x5a\xaa\x0d\x55\xf3\x95\x4f\x49\xf0\x15\xc9\x48\x2a\x9e\x8b\xa3\x5d\x43\x54\xa0\xf0\x16\xf3\x49\x33\xb2\xf9\xe1\xe7\xc2\xe4\xad\x0d\x91\x61\x4c\xca\x86\x67\xc9\x22\x7b\x7d\xba\x52\x9f\xd3\x13\xbd\x44\x79\xfa\x23\x1f\xc4\xe3\x8b\xf7\x71\x0a\x4f\x85\xde\xd0\x89\x7c\x0c\xc6\x12\x90\x67\xe3\xed\xb9\x45\x9d\x9e\x8c\xbc\x87\xa3\x3f\x13\x1f\x2f\x24\xb6\x31\x21\x6c\xfd\x89\xb6\x1d\x39\xf0\x1e\xf5\x10\x6d\x98\xbc\x62\x2a\xae\x56\x29\xff\xa9\xbb\x49\xb5\x8b\x2a\xfe\xe8\xe8\xfb\xef\xeb\x68\x5d\x46\xa9\xd7\x9b\x5b\xe5\xfd\xa2\x63\x8d\xb3\x69\x33\xf6\x52\x2c\xb3\x49\x0c\xdb\x98\x90\xd9\x62\xde\xac\x49\xaf\x71\x5f\x01\x95\x03\x02\x4a\xe9\x72\xbc\xc3\xd2\x74\x30\x4b\x5f\x61\xcb\x11\x51\x62\x1b\x1c\xb5\x03\x58\x6d\xf8\xbb\x82\x8a\x1f\x50\x77\xf2\xed\xf6\xb6\xbb\x59\x8b\x62\x36\x47\x9f\x2f\x2f\x3f\x2d\xc6\x12\xc4\x84\xf5\x0a\xca\xc7\x1b\xf8\x18\xfa\xe2\xe8\xe3\x82\x90\x90\x25\xf6\x33\xb4\xfb\x30\x63\x19\xdc\xcb\xfb\xc9\xfc\x2f\x00\x00\xff\xff\xe2\x8a\x8a\x65\x65\x03\x00\x00")

func klusterletOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletOperatorYaml,
		"klusterlet/operator.yaml",
	)
}

func klusterletOperatorYaml() (*asset, error) {
	bytes, err := klusterletOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x2c\xc8\x0c\x4b\x2d\x2a\xce\xcc\xcf\xb3\x52\x28\x33\xe4\xca\xce\xcc\x4b\xb1\x52\x08\x4e\x2d\x2a\xcb\x4c\x4e\x75\x4c\x4e\xce\x2f\xcd\x2b\xe1\xca\x4d\x2d\x49\x4c\x49\x2c\x49\xb4\xe2\x52\x50\xc8\x4b\xcc\x4d\xb5\x52\xc8\xce\x29\x2d\x2e\x49\x2d\xca\x49\x2d\x81\x0a\x15\x17\x24\x26\xa7\x5a\x29\x28\x55\x57\x2b\xe8\x79\xc3\x25\xfd\x60\x32\x0a\xb5\xb5\x4a\x5c\x80\x00\x00\x00\xff\xff\x42\xa3\x6c\x0b\x6b\x00\x00\x00")

func klusterletService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletService_accountYaml,
		"klusterlet/service_account.yaml",
	)
}

func klusterletService_accountYaml() (*asset, error) {
	bytes, err := klusterletService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/service_account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hub/managedcluster/manifests/managedcluster-clusterrole.yaml":                     hubManagedclusterManifestsManagedclusterClusterroleYaml,
	"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml":              hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
	"hub/managedcluster/manifests/managedcluster-service-account.yaml":                 hubManagedclusterManifestsManagedclusterServiceAccountYaml,
	"klusterlet/bootstrap_secret.yaml":                                                 klusterletBootstrap_secretYaml,
	"klusterlet/cluster_role.yaml":                                                     klusterletCluster_roleYaml,
	"klusterlet/cluster_role_binding.yaml":                                             klusterletCluster_role_bindingYaml,
	"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
	"klusterlet/image_pull_secret.yaml":                                                klusterletImage_pull_secretYaml,
	"klusterlet/klusterlet.yaml":                                                       klusterletKlusterletYaml,
	"klusterlet/namespace.yaml":                                                        klusterletNamespaceYaml,
	"klusterlet/operator.yaml":                                                         klusterletOperatorYaml,
	"klusterlet/service_account.yaml":                                                  klusterletService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hub": &bintree{nil, map[string]*bintree{
		"managedcluster": &bintree{nil, map[string]*bintree{
			"manifests": &bintree{nil, map[string]*bintree{
				"managedcluster-clusterrole.yaml":        &bintree{hubManagedclusterManifestsManagedclusterClusterroleYaml, map[string]*bintree{}},
				"managedcluster-clusterrolebinding.yaml": &bintree{hubManagedclusterManifestsManagedclusterClusterrolebindingYaml, map[string]*bintree{}},
				"managedcluster-service-account.yaml":    &bintree{hubManagedclusterManifestsManagedclusterServiceAccountYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"klusterlet": &bintree{nil, map[string]*bintree{
		"bootstrap_secret.yaml":     &bintree{klusterletBootstrap_secretYaml, map[string]*bintree{}},
		"cluster_role.yaml":         &bintree{klusterletCluster_roleYaml, map[string]*bintree{}},
		"cluster_role_binding.yaml": &bintree{klusterletCluster_role_bindingYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": &bintree{klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml, map[string]*bintree{}},
		}},
		"image_pull_secret.yaml": &bintree{klusterletImage_pull_secretYaml, map[string]*bintree{}},
		"klusterlet.yaml":        &bintree{klusterletKlusterletYaml, map[string]*bintree{}},
		"namespace.yaml":         &bintree{klusterletNamespaceYaml, map[string]*bintree{}},
		"operator.yaml":          &bintree{klusterletOperatorYaml, map[string]*bintree{}},
		"service_account.yaml":   &bintree{klusterletService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
