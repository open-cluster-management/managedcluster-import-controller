// Code generated for package bindata by go-bindata DO NOT EDIT. (@generated)
// sources:
// resources/hub/managedcluster/manifests/managedcluster-clusterrole.yaml
// resources/hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml
// resources/hub/managedcluster/manifests/managedcluster-service-account.yaml
// resources/klusterlet/bootstrap_secret.yaml
// resources/klusterlet/cluster_role.yaml
// resources/klusterlet/cluster_role_binding.yaml
// resources/klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml
// resources/klusterlet/image_pull_secret.yaml
// resources/klusterlet/klusterlet.yaml
// resources/klusterlet/klusterlet_admin_aggregate_clusterrole.yaml
// resources/klusterlet/namespace.yaml
// resources/klusterlet/operator.yaml
// resources/klusterlet/service_account.yaml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _hubManagedclusterManifestsManagedclusterClusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x90\x31\x4f\xe3\x50\x0c\xc7\xf7\xf7\x29\xac\x74\xbd\xe6\x74\xdb\xe9\x6d\xa7\x0e\x37\x01\x12\x03\x0b\xea\xe0\x24\x26\x31\x4d\x9e\x1f\xb6\xd3\xaa\x54\xfd\xee\xa8\x4d\x40\x40\xe9\x64\x4b\xfe\xc9\xfe\xfd\xbd\x80\x95\xe4\xbd\x72\xdb\x39\xac\x24\xb9\x72\x35\xba\xa8\x81\x0b\x78\x47\x70\x97\x29\xc1\xaa\x1f\xcd\x49\xe1\x06\x13\xb6\x34\x50\x72\xc8\x2a\xcf\x54\x7b\x08\x98\xf9\x81\xd4\x58\x52\x04\xad\xb0\x2e\x71\xf4\x4e\x94\x5f\xd1\x59\x52\xb9\xf9\x6b\x25\xcb\xef\xed\x9f\xb0\xe1\xd4\xc4\xf7\x55\xf7\xd2\x53\x18\xc8\xb1\x41\xc7\x18\x00\x12\x0e\x14\xc1\xf6\xe6\x34\x44\xc9\x94\x96\xf5\x44\x2e\x87\x8f\xa3\x71\x6a\x9b\x79\x12\x2b\x11\x37\x57\xcc\xf1\x70\x80\x72\x92\x6b\xe6\x03\xb7\x38\x10\x1c\x8f\x41\xc7\x9e\x2c\x86\x05\xfc\xeb\x7b\xd9\xc1\xbc\x01\xb0\x3d\x85\x70\x01\x15\x47\x27\x60\x37\xa8\x49\x9d\x9f\xb8\x46\xa7\xb0\x04\xcc\xfc\x5f\x65\xcc\x16\xe1\xb1\xf8\x34\xb2\x39\x52\xb1\x0e\x00\x4a\x26\xa3\xd6\x74\x01\x71\x9b\x38\xb5\x4a\x2f\x23\x99\xdb\x99\xdd\x92\x56\x13\xa7\x84\x4e\xc5\x2f\x28\x5a\xf2\x53\xe9\xd9\xce\x75\x87\x5e\x77\xc5\xfa\xba\x6c\x4b\x7e\x61\x36\xc5\x2d\xaf\xbc\xec\x47\xd1\xaf\x6f\xfc\x66\x37\x3b\xcd\x92\xeb\xf0\x16\x00\x00\xff\xff\xf7\xf9\xea\x7a\x21\x02\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterroleYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrole.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterroleYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterClusterrolebindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\x31\x6b\x33\x31\x0c\x86\x77\xff\x0a\xc1\x37\xe7\x3e\xba\x15\x6f\x4d\x86\x4e\x6d\x21\x85\xee\x3a\x9f\x9a\xa8\x89\x25\x23\xcb\x81\x34\xe4\xbf\x97\xeb\x5d\x02\x25\xd0\xad\x9b\xe1\x7d\xfd\x3e\x0f\xfa\x07\x2b\x2d\x47\xe3\xcd\xd6\x61\xa5\xe2\xc6\x7d\x73\xb5\x0a\xae\xe0\x5b\x82\x97\x42\x02\xab\x7d\xab\x4e\x06\x4f\x28\xb8\xa1\x4c\xe2\x50\x4c\x3f\x28\x79\x08\x58\xf8\x8d\xac\xb2\x4a\x04\xeb\x31\x75\xd8\x7c\xab\xc6\x9f\xe8\xac\xd2\xed\xee\x6b\xc7\xfa\xff\x70\x17\x76\x2c\x43\xbc\x4c\xad\x75\x4f\x4b\x96\x81\x65\x13\x32\x39\x0e\xe8\x18\x03\x80\x60\xa6\x08\xf5\x58\x9d\x72\xd4\x42\xb2\x48\xd3\x87\x45\xbe\xb2\xe3\xf4\x1c\xe6\x24\xf6\xaa\x5e\xdd\xb0\xc4\xd3\x09\xba\xc9\x71\x98\x39\xcf\x98\x09\xce\xe7\x60\xba\xa7\x35\xbd\x8f\x08\x2c\xfc\x68\xda\xca\x2f\xba\x01\xe0\xc6\xf6\x0f\xe5\x6a\xeb\xc7\x5b\xd6\x18\x16\x33\xf7\x95\xec\xc0\x89\x1e\x52\xd2\x26\x7e\x45\x8f\x13\xcb\xcb\xe0\xcf\xce\x65\x6b\xaa\xd6\x82\x69\xee\xdf\x22\xbf\xc3\xb1\xfb\x15\x00\x00\xff\xff\x10\xfe\x36\xee\xfc\x01\x00\x00")

func hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
		"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterClusterrolebindingYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterClusterrolebindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hubManagedclusterManifestsManagedclusterServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xce\xb1\x6a\xc4\x30\x10\x84\xe1\x5e\x4f\x31\x38\x7d\x20\xad\xba\xc4\x75\x9c\x22\x90\x7e\x23\x2f\xb6\x92\xd3\xae\x58\xad\x0d\x87\xf1\xbb\x1f\xdc\xd9\xc5\xd5\xf3\x0d\xfc\x2f\xe8\xb5\x5e\x2d\x4f\xb3\xa3\x57\x71\xcb\xbf\x8b\xab\x35\xb8\xc2\x67\xc6\x57\x65\x41\x7f\x59\x9a\xb3\xe1\x93\x84\x26\x2e\x2c\x8e\x6a\xfa\xc7\xc9\x43\xa0\x9a\x7f\xd8\x5a\x56\x89\x58\xdf\xc2\x7f\x96\x31\xe2\x9b\x6d\xcd\x89\xdf\x53\xd2\x45\x3c\x14\x76\x1a\xc9\x29\x06\x40\xa8\x70\x44\xb7\x6d\x78\xfd\x50\xf5\xe6\x46\xf5\x99\x0f\x54\x18\xfb\xde\x1d\xb8\x55\x4a\xe7\xe3\x11\x30\x1e\x3d\xc3\xb9\xde\xf5\x2d\x00\x00\xff\xff\x9b\xd4\xc7\xa7\xca\x00\x00\x00")

func hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes() ([]byte, error) {
	return bindataRead(
		_hubManagedclusterManifestsManagedclusterServiceAccountYaml,
		"hub/managedcluster/manifests/managedcluster-service-account.yaml",
	)
}

func hubManagedclusterManifestsManagedclusterServiceAccountYaml() (*asset, error) {
	bytes, err := hubManagedclusterManifestsManagedclusterServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hub/managedcluster/manifests/managedcluster-service-account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletBootstrap_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\xb1\x4e\xc3\x40\x10\x44\xfb\xfb\x8a\x91\xa9\x83\x44\x7b\x25\x2e\x23\x48\x81\x44\xbf\x76\x16\xfb\x48\xbc\xbb\xec\xed\x21\x45\x51\xfe\x1d\x01\x36\xd4\x33\xef\xbd\x3b\xf4\x6a\x17\x2f\xd3\x1c\xe8\x55\xc2\xcb\xd0\x42\xbd\x22\x14\x31\x33\x0e\xc6\x82\xfe\xdc\x6a\xb0\xe3\x89\x84\x26\x5e\x58\x02\xe6\xfa\xce\x63\xa4\x44\x56\x5e\xd9\x6b\x51\xc9\xf8\x7c\x48\xa7\x22\xc7\x8c\x17\x1e\x9d\x23\x2d\x1c\x74\xa4\xa0\x9c\x00\xa1\x85\x33\xba\x41\x35\x6a\x38\xd9\x6e\x6e\xc3\xee\xd4\x06\x1e\x55\xde\xca\xd4\xad\x97\x6a\x34\x7e\xff\xae\x57\xdc\xef\x7f\xb3\x67\x8e\xe7\x6d\xc1\xed\xd6\xa5\xb8\x18\x67\x1c\x8c\x3e\x1a\xa7\xcd\xff\xaf\x5a\xe9\xc7\xad\xb4\xff\x5b\x7e\xe8\xaf\x00\x00\x00\xff\xff\xfb\xf6\x72\x27\xf2\x00\x00\x00")

func klusterletBootstrap_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletBootstrap_secretYaml,
		"klusterlet/bootstrap_secret.yaml",
	)
}

func klusterletBootstrap_secretYaml() (*asset, error) {
	bytes, err := klusterletBootstrap_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/bootstrap_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_roleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x3f\x8f\xdb\x3e\x0c\xdd\xfd\x29\x04\xdf\xfa\x4b\x82\xdf\x56\x78\x2b\x32\x74\x2a\x0a\x74\xe8\x52\x64\x60\x64\xc6\x61\x23\x8b\x02\x49\x25\xbd\x7e\xfa\x42\xce\x9f\xde\xc5\x4e\x9b\x43\x33\x74\xb2\x2d\x89\x8f\xef\x3d\x3f\xf1\xc9\x2d\x39\x3d\x0b\x75\x5b\x73\x4b\x8e\x26\xb4\xce\xc6\xa2\xce\xd8\xd9\x16\xdd\xa7\x84\xd1\x2d\x43\x56\x43\x71\x1f\x21\x42\x87\x3d\x46\x73\x49\xf8\x1b\x7a\xab\x2a\x48\xf4\x05\x45\x89\x63\xe3\x64\x0d\x7e\x0e\xd9\xb6\x2c\xf4\x03\x8c\x38\xce\x77\xef\x74\x4e\xbc\xd8\xff\x5f\xed\x28\xb6\xcd\x19\xea\x33\x07\xac\x7a\x34\x68\xc1\xa0\xa9\x9c\x8b\xd0\x63\xe3\x76\xc7\xdd\x80\x56\x49\x0e\xa8\x4d\xf5\xe4\xde\x87\xc0\x87\x81\x8b\x60\x47\x6a\x32\x00\xcf\x38\xa1\x80\xb1\x14\xa2\x5e\x10\x0c\xdd\x81\x65\x17\x18\xda\x6a\xe6\x20\xd1\x07\xe1\x9c\xb4\x71\x5f\xeb\x7a\x55\x39\x27\xa8\x9c\xc5\xe3\xb0\xa2\xe8\x05\x4d\xeb\xff\x5c\xed\x39\x6e\xa8\xeb\x21\x0d\x5f\x8a\xb2\x27\x8f\xe0\x3d\xe7\x68\x3a\x54\xee\x51\xd6\x43\xd5\xb1\x4d\x39\xd6\xa1\x95\x47\x20\x1d\x9e\x39\xb5\xa7\x8d\x03\x98\xdf\x96\x97\x74\x7e\x69\x31\xa0\x61\xbd\xba\x26\x35\x65\xd3\x04\xd1\xbc\x2e\x36\x83\xf7\xa8\x2a\xb8\x27\x3c\x4c\x93\x1a\xe1\x8f\xb1\x8a\xc5\x9a\xc0\xe3\xbd\xb2\x4e\x62\x6e\x4a\x28\x67\x70\x8f\xd1\xf4\x26\xff\xe3\xf6\xad\x7e\x17\x93\x4e\x06\x8e\x4d\x4a\x49\xc7\xa0\x2d\xa6\xc0\xcf\xfd\xef\x90\x1f\xf0\x83\x6e\x86\x79\x4c\xc8\x1f\x63\x2b\x1c\x70\x4d\xb1\xa5\xd8\x0d\x61\x7a\xf5\xfd\xaf\x11\xbd\x30\x7c\x20\xb5\x92\x07\xf5\x10\x4e\xe7\x8a\xf6\x7a\xf5\xa6\x2b\xec\xa5\xd5\x71\x08\x08\xbf\x1b\xc6\x32\x63\x6e\x27\xcd\x67\x35\xee\xcf\x4b\x2d\x6e\x28\x52\xe9\xf2\x50\xe7\xef\x92\xd2\x0f\x53\xf2\xc5\x2c\x2b\x72\x74\x7e\x2d\xeb\x5c\x32\xe7\x84\x71\x76\xfa\x33\xb3\xfe\x32\x62\x27\x55\xfe\x02\xbd\xd2\x35\x7d\x75\x5f\xca\xfa\x63\x8e\xfe\x96\xd0\x42\x0d\x2c\x5f\xf1\xba\xee\x7f\xa7\x87\x45\xc7\xe2\x58\xbb\x18\x0a\x1d\xa4\x14\x08\xdb\x1e\x22\x6d\x50\xad\xcc\xfa\xb1\xa7\x65\xf5\x4d\xf4\xa7\x50\x5f\x0b\x18\xe7\xe3\x2c\xe4\x67\x00\x00\x00\xff\xff\xee\x8d\xc6\x34\x3b\x07\x00\x00")

func klusterletCluster_roleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_roleYaml,
		"klusterlet/cluster_role.yaml",
	)
}

func klusterletCluster_roleYaml() (*asset, error) {
	bytes, err := klusterletCluster_roleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCluster_role_bindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4f\xc3\x40\x0c\x85\xf7\xfb\x15\x56\x99\x09\x62\x43\xb7\x41\x06\x06\x04\x48\x45\x62\x77\x2e\x26\x31\x49\xec\x93\xcf\x57\x09\xaa\xfe\x77\x54\x95\xb2\x10\x75\xf5\xe7\xf7\xbe\x77\x05\xad\xe6\x2f\xe3\x61\x74\x68\x55\xdc\xb8\xab\xae\x56\xc0\x15\x7c\x24\x78\xcd\x24\xd0\xce\xb5\x38\x19\x3c\xa3\xe0\x40\x0b\x89\x43\x36\xfd\xa4\xe4\x21\x60\xe6\x77\xb2\xc2\x2a\x11\xac\xc3\xd4\x60\xf5\x51\x8d\xbf\xd1\x59\xa5\x99\xee\x4a\xc3\x7a\xb3\xbb\x0d\x13\x4b\x1f\xcf\x55\x5b\x9d\xe9\x81\xa5\x67\x19\xc2\x42\x8e\x3d\x3a\xc6\x00\x20\xb8\x50\x84\xe9\xf4\x34\x93\x07\xd3\x99\xb6\xf4\x71\x64\x98\xf9\xd1\xb4\xe6\x0b\x9e\x00\xf0\x4f\xb3\xd6\x5a\x6a\x77\x5c\x5f\x62\xb8\xfe\x0d\xbc\x91\xed\x38\xd1\x7d\x4a\x5a\xc5\xd7\x32\xa7\x53\xc9\x98\x28\xc2\x66\xbf\x87\xe6\xe9\x0f\xbe\x9c\x09\x1c\x0e\x9b\xf0\x13\x00\x00\xff\xff\xf2\xf1\x30\xe3\x54\x01\x00\x00")

func klusterletCluster_role_bindingYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCluster_role_bindingYaml,
		"klusterlet/cluster_role_binding.yaml",
	)
}

func klusterletCluster_role_bindingYaml() (*asset, error) {
	bytes, err := klusterletCluster_role_bindingYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/cluster_role_binding.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\xcd\x6e\x23\xb9\x11\xbe\xeb\x29\x0a\xde\x83\x13\xc0\x6a\x63\x90\x4b\xa0\x9b\xa3\xdd\x00\xc6\xce\xcc\x0e\x6c\xef\xec\x61\xb1\x87\xea\x66\x49\xcd\x98\x4d\x76\xc8\xa2\x66\x95\x20\xef\x1e\x14\xd9\xdd\xea\x1f\xc9\x63\x67\xb2\x7d\x92\xc8\x62\xf1\xab\x8f\xf5\x47\x7e\x07\x5b\xd7\x1e\xbd\xde\xd7\x0c\x5b\x67\xd9\xeb\x32\xb2\xf3\x01\xd8\x01\xd7\x04\x3f\xb5\x64\x61\x6b\x62\x60\xf2\xf0\x01\x2d\xee\xa9\x21\xcb\xd0\x7a\xf7\x0f\xaa\x78\xb5\xc2\x56\x7f\x26\x1f\xb4\xb3\x1b\xc0\x56\xd3\xef\x4c\x56\xfe\x85\xe2\xf9\xaf\xa1\xd0\xee\xf6\xf0\xae\x24\xc6\x77\xab\x67\x6d\xd5\x06\xb6\x31\xb0\x6b\x1e\x28\xb8\xe8\x2b\xfa\x9e\x76\xda\x6a\xd6\xce\xae\x1a\x62\x54\xc8\xb8\x59\x01\x54\x9e\x50\x06\x9f\x74\x43\x81\xb1\x69\x37\x60\xa3\x31\x2b\x00\x8b\x0d\x6d\xe0\x39\xe3\x31\xc4\xa1\x70\x2d\x79\x64\xe7\xe5\x87\x5d\x57\x79\x66\xdd\x0c\x48\x0b\xed\x56\xa1\xa5\x4a\xf4\xee\xbd\x8b\xed\x06\x5e\xb3\x24\x6f\x15\x64\x15\x40\x86\xfe\xe3\xb0\x6b\x1a\x34\x3a\xf0\x8f\xb3\x89\xf7\x3a\xe4\xc9\xd6\x44\x8f\x66\x82\x34\x8d\x07\x6d\xf7\xd1\xa0\x1f\xcf\xac\x00\x42\xe5\x5a\xda\xf4\x3c\xcb\x40\x2c\x7d\xc7\x51\x87\x21\x30\x72\x0c\x1b\xf8\xf7\x7f\x56\x00\x07\x34\x5a\x25\x8a\xf2\xa4\x18\x72\xf7\xe9\xfe\xf3\x5f\x1e\xab\x9a\x1a\xcc\x83\x00\x8a\x42\xe5\x75\x9b\xe4\x46\x28\xc1\x53\xeb\x29\x90\xe5\x00\x95\x9c\xb9\x33\x86\x7c\x00\x67\xd3\x91\x67\x22\x14\x74\xc4\x14\xf0\x4b\x4d\xb6\xd3\x08\xb2\x60\xa7\xf7\xd1\x93\xba\x49\xd2\x13\xb5\xff\x8c\xda\x53\x00\x84\x40\x95\x27\x4e\x1c\x2a\x70\x3b\x28\x9d\xe3\xc0\x1e\xdb\x75\x1d\xcb\xf5\x73\x2c\x29\xeb\x19\xd4\xea\xbc\x77\xc0\x86\x32\xf3\x2d\x56\x24\x4e\x88\xc6\xb8\x2f\x70\xf7\xe9\x3e\xa9\xa7\xc0\x83\x6b\xd6\xb1\x84\x9d\xf3\xe9\xb7\xa7\xbd\x16\xfd\xc9\x95\x7a\x9d\xad\x77\xec\x2a\x67\x8a\x6e\x84\x8f\x42\xb2\x2b\x93\xe3\x0e\x22\x2d\x79\xd6\x3d\xcb\xf2\x8d\x3c\x7a\x18\x9b\x71\x79\x2d\x64\x67\x19\x50\xe2\xc3\x14\x12\x8c\x43\x1e\x23\x05\x21\x1d\x84\x98\xce\xb5\x0e\x27\xc6\xa7\x08\xd3\xd9\xed\x00\x6d\x87\xaa\x80\x47\xf2\xa2\x04\x42\xed\xa2\x51\xc2\xf6\x81\xbc\x50\x5b\xb9\xbd\xd5\xff\x1a\x34\x0f\x2c\x18\x64\x0a\x3c\xd1\xa8\x2d\x93\xb7\x68\xc4\x4d\x22\xdd\x00\x5a\x05\x0d\x1e\xc1\x93\xec\x01\xd1\x8e\xb4\x25\x91\x50\xc0\x07\xe7\x09\xb4\xdd\xb9\x0d\xd4\xcc\x6d\xd8\xdc\xde\xee\x35\xf7\x31\x5c\xb9\xa6\x89\x56\xf3\xf1\xb6\x1a\xe5\x88\x5b\x45\x07\x32\xb7\x41\xef\xd7\xe8\xab\x5a\x33\x55\x1c\x3d\xdd\x62\xab\xd7\x09\xb8\xe5\x94\x08\x1a\xf5\xdd\xe0\xcc\xd7\x23\xa4\xf9\x3c\x02\x7b\x6d\x4f\x8e\x90\x62\xed\x22\xef\x12\x70\xa0\x93\x87\xa5\x65\x19\xff\x89\x5e\x19\x12\x56\x1e\x7e\x78\x7c\x82\x7e\xd3\x74\x04\x53\xce\x13\xdb\xa3\x38\x38\x11\x2f\x44\x69\xbb\x23\x9f\x0f\x6e\xe7\x5d\x93\x34\x92\x55\xad\xd3\x96\xd3\x9f\xca\x68\xb2\x53\xd2\x43\x2c\x1b\xcd\x61\xec\xa5\x05\x6c\xd1\x5a\xc7\x50\x12\xc4\x56\x21\x93\x2a\xe0\xde\xc2\x16\x1b\x32\x5b\x0c\xf4\x87\xd3\x2e\x0c\x87\xb5\x50\xfa\x75\xe2\xc7\x09\x78\x2a\x38\x89\x18\x80\x3e\x9b\x9e\x3d\xa1\xc7\x96\xaa\x71\x7e\x11\xb6\x14\x05\xed\x49\x81\xa2\xd6\xb8\x63\x2a\x1f\x7d\x16\x49\xe1\x20\x21\x30\x4b\xae\x43\x2c\xee\x25\x1f\x7f\x0d\xd1\xf9\x38\x96\xaf\xcb\x61\x1f\xa5\x6c\x4c\x26\x66\xb0\xb7\x27\x39\x71\x2f\x41\x2d\x59\x28\xc7\xef\x22\x25\x4a\xec\x95\x94\xcb\x14\xa9\x99\x5e\x90\x3c\x5a\xc7\xb2\x80\xa7\x69\x7a\x4c\xb6\xc0\x9e\xac\x54\x9f\x94\x25\x3d\x5a\xe5\x9a\xbc\x93\xde\x81\x66\xd9\xdb\x3a\x5e\x68\x0c\xc4\x37\xe0\x3c\x28\x1d\x2a\x97\xdc\x54\x50\x61\x2b\x66\x7b\x8d\x4c\x03\xb2\x8c\xda\xa6\x8a\x10\x6a\xbd\x9b\x90\x77\xf1\xec\xe5\x93\xca\x2d\x59\x23\x07\xc2\xcf\x0f\xef\xc3\x8b\x8c\xfd\xb0\x10\x9f\x1f\x3b\xa6\x12\x99\xf2\x5b\xab\x43\x12\x83\xe8\x4d\x58\x58\x27\xf9\xa9\x42\x28\xa3\x55\x26\x25\x52\x4c\x44\x60\x55\x51\x08\xba\x34\x34\x60\x33\x47\xb8\xef\x79\x0a\xc4\x40\x4d\xcb\xc7\x9b\xfe\x78\x16\x8a\x7b\x52\x6a\x14\x5a\xc7\x5a\x46\xba\xa3\x37\x79\x4b\xa9\x27\xfd\x8a\x0a\x2d\x1c\x74\xd0\x17\xe8\x43\xef\xf1\x38\x9b\xd1\x4c\xcd\x82\xb2\x79\x74\xf4\x64\x2d\xb8\x1a\x33\x34\x25\x64\xa1\x11\x5e\x66\x68\x21\x7f\x21\x64\xf2\x77\x29\x70\x3a\x02\xf1\x6f\x09\xc3\xb9\xb9\x79\x04\xdd\x65\xd1\x3e\x7c\x06\xfc\x12\x2c\x95\xb3\x56\x12\xae\xd4\xf3\xde\xd2\xb3\x2a\xe1\x42\xc4\x15\xf0\x78\x0c\x4c\x0d\x54\xe4\x39\x00\x7a\x82\x18\x48\x4d\xa2\x46\x3c\x62\x7e\x5c\x63\x06\xce\xf8\x7c\xff\xed\x9c\x6f\x90\x37\x50\x1e\xf9\x1c\xdf\xd1\x9b\x57\x30\x20\xc7\xda\x19\x2f\x87\x38\xf1\xfb\xa1\x7a\x4c\xcd\xbb\xc0\x41\x6f\xf4\xdb\x8c\x19\xda\xa6\x17\xe3\xf6\xe3\xd0\x5c\x8d\xf2\xdc\xd0\x6d\xe5\x14\x9d\x5d\x32\xa5\xde\x94\xc4\x06\x91\x05\xa0\x26\x06\x86\x1a\x0f\x12\xed\xad\xa7\x9d\xfe\x5d\x2c\xbc\xba\xd0\x58\xaf\xaf\x72\x33\xf2\xf5\x5c\x37\x05\xf6\x92\xca\x04\xf3\x4a\x94\x25\x87\x18\x6c\x58\x66\x99\x79\x29\x79\x91\xcc\x71\x43\x79\xdf\xe0\x9e\x3e\x45\x63\x1e\x67\x95\x6f\x41\xee\xc3\xa5\x55\x97\x4a\xa2\x16\xa1\x65\xde\x9a\x57\xc7\x31\x9a\x37\x1a\xf2\xc5\xf9\xe7\xd7\x1b\xf0\xcb\x5c\xfa\x45\xe0\x53\xa0\xcb\x3a\xb8\x4b\xbb\xbf\x01\x70\x77\xc9\xb9\xd8\x5c\xa4\xe9\x39\xa4\x2a\x7a\x2f\x95\x35\x2f\x9e\x36\x13\xdf\xde\x40\x38\xab\xd2\x05\xf5\xe5\x6a\x78\xbd\x1d\xe4\xd2\x95\x0a\xbb\xfb\x8c\xd2\xbb\x1d\xf9\xae\xe3\xc9\x02\x1d\x4e\x0a\x92\x75\x96\xc9\x5a\x9a\xce\x13\xfe\x02\x3e\xcb\x55\x6f\xb4\x3a\xb5\x74\x92\x00\x37\x70\xd7\xb6\x46\x93\xda\x40\xe5\x9a\xd6\xd9\x44\x88\xc4\xe2\x42\x69\x49\x64\xa5\x5b\x10\xe9\xfe\xa6\xb5\x48\xb0\x77\x07\xd4\x06\x4b\x43\x13\x7d\x59\x7a\x19\xf7\xb3\x86\x48\x12\x32\xf6\x0a\x52\x8c\x7b\x42\x75\x94\x70\x4c\x19\xb0\x80\x4f\xde\xed\xbd\x54\x2b\xbb\x1f\x6f\xb0\xd0\x7c\x1e\x5e\xda\x40\x5b\x40\x60\x8f\x36\x24\x2a\xa4\xd7\x17\x2e\xa9\x80\xef\x69\xef\x51\x4d\xa9\x78\xad\x66\xe5\x52\xf1\x68\x90\xab\x7a\xe2\xe2\xd3\x28\x44\x7b\xae\xd1\x33\x47\xf1\x9c\x83\x56\xb2\x2c\x63\x48\x06\xeb\x8a\x8a\xeb\xff\x6f\xeb\x90\xbc\x66\x70\xb3\xde\xcb\xc2\xc8\x35\xe4\x1e\x21\x75\x4c\x3b\xbb\x2c\x1d\xdf\xd0\x05\x18\x0c\xfc\x34\xd0\xfe\xa4\x97\xbd\xf4\x19\xbc\xef\x17\x8b\xfa\x82\x23\xea\x80\x65\x20\x45\x6f\x0f\xff\x52\x2d\xac\xd1\xca\x71\xa5\x8b\x98\xb3\xd4\x87\xb9\xb4\x12\xd6\x71\xfd\xe6\x32\xd9\x7f\x7d\xcd\x97\x7b\xd9\x5a\xe0\x9c\x91\x6a\x28\x04\xdc\xbf\xc6\xdc\x0f\x59\x32\xdf\x4d\xeb\xd8\xa0\x5d\x4b\x04\xa4\x70\x68\xfa\x39\xab\x74\x85\xe9\x8e\xaa\x88\x51\x9f\x69\x85\xf3\x87\xa5\x8b\x7c\xe2\xaa\xb3\x38\x33\xf1\x3f\x59\xeb\x09\xc3\xf4\x39\xe3\x82\x19\x0f\x49\x30\x5b\xf1\xa7\xd2\x6b\xda\xfd\xb9\x5b\x3c\x3c\xb5\x0c\x07\x76\x1d\x12\xbc\x0b\x36\x7c\x3b\xe8\x65\x31\xb8\x00\xba\x2b\x0b\x9d\x7b\x9d\xca\xc0\x04\x6d\x01\x3f\xd9\xd4\x49\x3c\xf9\x48\x37\x17\x40\xff\x1d\x4d\xa0\x1b\xf8\xd9\x3e\x5b\xf7\xe5\x4c\x10\xbd\x02\x75\x9a\xfe\x3a\xe6\xa7\x63\x3b\x04\x84\x2c\x19\xf0\xf6\x17\x90\x01\xf7\x6b\x40\x1c\xfa\x17\xd8\xc3\xbb\xd3\xbf\x44\xdd\xba\x7b\x32\x4d\x13\x90\x93\xb1\xda\x00\xfb\x48\xdd\xb3\xa2\xf3\xe2\xe1\x79\xe4\x44\xb9\x5c\x2d\x5a\x26\xf5\x71\xfe\x0a\x7a\x75\x35\x79\xe0\x4c\x7f\x47\x45\x12\x7e\xfd\x6d\x95\xb5\x92\xfa\xdc\xe3\x80\x5f\x7f\xfb\x6f\x00\x00\x00\xff\xff\xb8\x22\x27\x77\x68\x16\x00\x00")

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
		"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml",
	)
}

func klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml() (*asset, error) {
	bytes, err := klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletImage_pull_secretYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xce\xbf\x6a\x03\x31\x0c\xc7\xf1\xdd\x4f\xf1\x83\xee\x81\xae\xb7\x5e\x97\x52\xfa\x07\x5a\xba\xab\x3e\xf5\xe2\xc4\x96\x8c\xac\x2b\x1c\xc1\xef\x5e\x92\x4b\xb6\xcc\xfa\x48\x5f\x3d\x60\xd4\xba\x5a\x9a\xf7\x8e\x51\xc5\x2d\xfd\x2c\xae\xd6\xe0\x0a\xdf\x33\xde\x2b\x0b\xc6\xbc\x34\x67\xc3\x2b\x09\xcd\x5c\x58\x1c\xd5\xf4\xc0\xd1\x43\xa0\x9a\xbe\xd9\x5a\x52\x19\xf0\xf7\x18\x8e\x49\xa6\x01\x9f\x1c\x8d\x3d\x14\x76\x9a\xc8\x69\x08\x80\x50\xe1\x01\xa7\x13\x76\xcf\x85\x66\xfe\x58\x72\xde\xd4\x1b\x15\x46\xef\x57\xd2\x2a\xc5\xab\x7b\xd9\xaa\x79\x23\x97\xc1\xd9\xf9\x5a\xef\x1f\xfa\x5a\xeb\x05\xdc\x8a\xc0\x6e\xd2\x78\x64\x8b\x2a\xbf\x69\x3e\xb4\xf3\x8b\x77\xf6\x9e\xc8\x09\xbd\xff\x07\x00\x00\xff\xff\xf1\xa4\x6d\x22\x0a\x01\x00\x00")

func klusterletImage_pull_secretYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletImage_pull_secretYaml,
		"klusterlet/image_pull_secret.yaml",
	)
}

func klusterletImage_pull_secretYaml() (*asset, error) {
	bytes, err := klusterletImage_pull_secretYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/image_pull_secret.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterletYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8f\x41\x4b\xc4\x30\x10\x85\xef\xf9\x15\x03\x9e\x5b\xf1\xda\x6b\x4f\x22\xae\xa2\xa8\xe7\xb1\x1d\xbb\xb1\xcd\x4c\x98\x4c\x15\x29\xfd\xef\x52\xb3\x6b\xb0\x78\xcc\xfb\xbe\x17\xde\x5c\x40\x2b\xf1\x4b\xfd\x70\x34\x68\x85\x4d\xfd\xeb\x6c\xa2\x09\x4c\xc0\x8e\x04\x77\x91\x18\xda\x69\x4e\x46\x0a\xb7\xc8\x38\x50\x20\x36\x88\x2a\xef\xd4\x99\x73\x18\xfd\x33\x69\xf2\xc2\x0d\x48\x24\x45\x13\xad\x25\x12\x57\x5d\x6e\x55\xe1\xb7\x55\x7b\xb9\xfc\xb8\x72\xa3\xe7\xbe\x81\x9b\x8c\x27\x32\x17\xc8\xb0\x47\xc3\xc6\x01\x30\x06\x6a\x60\x2c\x30\x45\xea\x36\xa0\x34\xf8\x64\x8a\xe6\x85\xaf\x03\x0e\x74\x3f\x4f\xd3\xe3\x06\x61\x59\xa0\x7e\xd8\xe3\x03\x06\x82\x75\x75\x00\x9f\xa2\xe3\x3f\x8d\x97\x73\x5c\xcc\xd3\xe4\xc3\xcf\x86\xcd\xc9\x17\xf7\x6d\xc9\x53\xc4\xee\x64\xf3\xf9\x99\xdd\x72\xd0\xce\x5b\x96\x0a\xfc\x1b\xd4\x4f\x89\xca\x0c\xea\x94\x2c\x73\xff\x37\xcc\xbf\xed\xcc\xb2\x71\xfb\x8d\xb8\x87\x75\xfd\x0e\x00\x00\xff\xff\x93\x21\x74\xc1\xbc\x01\x00\x00")

func klusterletKlusterletYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterletYaml,
		"klusterlet/klusterlet.yaml",
	)
}

func klusterletKlusterletYaml() (*asset, error) {
	bytes, err := klusterletKlusterletYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletKlusterlet_admin_aggregate_clusterroleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x8e\x31\x4f\xec\x30\x10\x84\x7b\xff\x8a\x95\x5f\xfb\x92\xa7\xd7\x21\xb7\x57\x50\x21\x24\x0a\x1a\x74\xc5\x26\x19\x25\xe6\x1c\xaf\xb5\x5e\x1f\x82\x5f\x8f\x92\xe3\xb8\x0a\x2a\x8f\x3c\x33\xdf\xce\x1f\x3a\x48\x79\xd7\x38\x2f\x46\x07\xc9\xa6\x71\x68\x26\x5a\xc9\x84\x6c\x01\x3d\x16\x64\x3a\xa4\x56\x0d\x4a\x0f\x9c\x79\xc6\x8a\x6c\x54\x54\x5e\x31\x9a\x73\x5c\xe2\x33\xb4\x46\xc9\x81\x74\xe0\xb1\xe7\x66\x8b\x68\xfc\x60\x8b\x92\xfb\xd3\x5d\xed\xa3\xfc\x3b\xff\x77\xa7\x98\xa7\x70\x45\x3d\x49\x82\x5b\x61\x3c\xb1\x71\x70\x44\x99\x57\x04\x92\x82\xdc\x8d\x97\x48\xb7\x7e\x5f\x0b\xa7\xcb\x57\x82\x75\x3c\xad\x31\x77\x3c\xcf\x8a\x99\x0d\xd7\xb4\x6e\x40\xa2\xc4\x03\x52\xdd\x80\xf4\xcb\x9a\x5b\xdb\xe4\x02\x0c\xe4\x4d\x1b\xbc\xd3\x96\x50\x83\xeb\x88\x4b\xbc\x57\x69\xa5\x06\x7a\xf1\x52\xa0\x6c\xa2\xfd\x0f\x03\xfb\x28\xfe\xe8\x88\x14\x55\x9a\x8e\xd8\x4b\xb7\xd1\x75\x37\xcf\xd0\x61\x37\x66\x98\xff\x4b\x3e\xc5\xba\xbf\x6f\x6c\xe3\xb2\x89\x51\xc1\x86\x4d\xb5\x32\x7d\xa9\x72\x35\x27\x24\x18\xfc\xf1\x33\x00\x00\xff\xff\xc6\xe5\x63\xd1\xb1\x01\x00\x00")

func klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletKlusterlet_admin_aggregate_clusterroleYaml,
		"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml",
	)
}

func klusterletKlusterlet_admin_aggregate_clusterroleYaml() (*asset, error) {
	bytes, err := klusterletKlusterlet_admin_aggregate_clusterroleYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/klusterlet_admin_aggregate_clusterrole.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletNamespaceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xb1\x0a\xc2\x30\x10\x06\xe0\x3d\x4f\xf1\x53\x77\xc1\x35\x6b\x47\x51\x37\xf7\xb3\xfd\x69\xa3\xcd\x25\x5c\xae\x82\x94\xbe\xbb\x83\xe0\xfe\xf1\x1d\xd0\x97\xfa\xb1\x34\xcd\x8e\xbe\xa8\x5b\x7a\xac\x5e\xac\xc1\x0b\x7c\x26\x6e\x95\x8a\x7e\x59\x9b\xd3\x70\x11\x95\x89\x99\xea\xa8\x56\x9e\x1c\x3c\x04\xa9\xe9\x4e\x6b\xa9\x68\xc4\xfb\x14\x5e\x49\xc7\x88\xab\x64\xb6\x2a\x03\x43\xa6\xcb\x28\x2e\x31\x00\x2a\x99\x11\xdd\xb6\xe1\x78\xfe\x8d\x0b\xfd\x4f\xb1\xef\xdd\x37\x00\x00\xff\xff\x56\xf3\x9e\x08\x8e\x00\x00\x00")

func klusterletNamespaceYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletNamespaceYaml,
		"klusterlet/namespace.yaml",
	)
}

func klusterletNamespaceYaml() (*asset, error) {
	bytes, err := klusterletNamespaceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/namespace.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletOperatorYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x41\x6f\xdb\x3c\x0c\x86\xef\xfe\x15\x44\xbe\x73\xbf\x2c\x5b\x0f\x83\x6e\x43\x0a\x6c\xc5\xb6\x36\x58\x8b\xdd\x19\xf9\x9d\xad\x55\x16\x05\x8a\x09\x90\x15\xf9\xef\x83\x9a\xd4\xb5\xd1\xfe\x80\xe9\x64\xf0\x21\x1f\xbc\xa4\xff\xa3\xb5\xe4\x83\x86\xae\x37\x5a\x4b\x32\x0d\xdb\x9d\x89\x16\x32\x21\xeb\x41\xb7\x19\x89\xd6\x71\x57\x0c\x4a\xdf\x39\x71\x87\x01\xc9\x28\xab\xfc\x86\xb7\xa6\x79\x08\xa9\x75\x74\x85\x1c\xe5\x50\x49\xc3\x39\xfc\x84\x96\x20\xc9\x11\xe7\x5c\x96\xfb\x55\x33\xc0\xb8\x65\x63\xd7\x10\x25\x1e\xe0\xe8\xe1\xa4\x8c\xb0\x73\xa9\x64\xf6\x70\xb4\x78\x7c\xa4\xff\xbf\x8e\xf0\xe6\x99\xd0\xf1\xb8\x68\x88\x22\x6f\x11\x4b\xd5\x50\x95\xcf\x3c\x25\xc3\x57\xa2\xc8\x31\x78\x2e\x8e\x56\x0d\x51\x41\x84\x37\xd1\xd3\xcc\xc0\xe6\xfb\x6f\x13\xc9\x6b\x0d\x91\x61\xc8\x91\x0d\xe7\x91\x49\xf6\xfa\xe2\x6c\xfa\xad\x79\xa2\xe7\x28\x4f\xdf\xd0\x7d\xf0\xf8\xe4\xbd\xec\xd2\xd3\x42\xaf\xda\x89\xbc\x24\xe3\x90\xa0\xa3\xf8\xe2\xad\x43\x9d\x5e\x18\xb8\x83\xa3\x7a\xa9\x1f\xe8\x42\x31\x65\x0b\x92\x6e\x33\x94\x4d\xf4\xba\x62\x3a\x1e\xe7\xfd\x9b\x5d\x8c\x1b\x89\xc1\x1f\x1c\x5d\xff\xba\x11\xdb\x28\x4a\xfd\x5f\xe3\x1e\xda\x4d\xb6\xaa\x01\x16\x4b\x9d\xe8\x2f\xe4\xec\x5f\xcc\x9b\x5e\x02\xbe\x80\x18\xf6\x48\x28\x65\xa3\xb2\xc5\x54\xda\x9b\xe5\xcf\xb0\x69\x89\x28\xb3\xf5\x8e\x96\x3d\x38\x5a\xff\x67\x86\x8a\xef\x51\xaf\xf0\xe5\xfe\x7e\x73\x37\x1f\x12\x35\x47\x1f\x2f\x2f\x3f\x4c\xca\x21\x05\x0b\x1c\xaf\x10\xf9\x70\x07\x2f\xa9\x2d\x8e\xde\x4f\x1a\x32\x34\x48\x3b\xa2\xd5\xbb\x91\x29\xb8\x0d\xff\x4e\xe6\xbf\x01\x00\x00\xff\xff\x42\xd3\x7a\x4c\x98\x03\x00\x00")

func klusterletOperatorYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletOperatorYaml,
		"klusterlet/operator.yaml",
	)
}

func klusterletOperatorYaml() (*asset, error) {
	bytes, err := klusterletOperatorYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/operator.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _klusterletService_accountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcd\x4f\x4b\xc4\x30\x14\x04\xf0\x7b\x3e\xc5\xb0\x9e\x77\xc1\x6b\x6e\xd2\x93\x88\x7f\x60\xd1\xfb\x33\x1d\xbb\x71\xdb\x97\x90\xbc\x2e\x48\xc9\x77\x97\x62\x15\xdc\xeb\x0c\xf3\x9b\x1b\x74\x29\x7f\x95\x38\x9c\x0c\x5d\x52\x2b\xf1\x7d\xb6\x54\x2a\x2c\xc1\x4e\xc4\x73\xa6\xa2\x1b\xe7\x6a\x2c\x78\x14\x95\x81\x13\xd5\x90\x4b\xfa\x64\x30\xe7\x24\xc7\x37\x96\x1a\x93\x7a\x5c\x6e\xdd\x39\x6a\xef\x71\x64\xb9\xc4\xc0\xbb\x10\xd2\xac\xe6\x26\x9a\xf4\x62\xe2\x1d\xa0\x32\xd1\xe3\xfc\x23\x8e\xb4\x2d\xaa\x59\x02\x3d\x76\xcb\x82\xc3\xc3\x5f\xf9\xf4\xdb\xa0\xb5\x9d\x5b\x96\x3d\xe2\x07\x0e\xaf\x95\xf7\x93\x0c\x7c\x99\xc7\xf1\xc8\x50\x68\x68\xcd\xc5\xff\x51\xf5\x6e\xbf\x9d\xad\xe6\xd5\x60\x85\xd7\xd1\x4a\x52\xfb\xd6\xbe\x03\x00\x00\xff\xff\xaa\xc3\xc7\xae\x08\x01\x00\x00")

func klusterletService_accountYamlBytes() ([]byte, error) {
	return bindataRead(
		_klusterletService_accountYaml,
		"klusterlet/service_account.yaml",
	)
}

func klusterletService_accountYaml() (*asset, error) {
	bytes, err := klusterletService_accountYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "klusterlet/service_account.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"hub/managedcluster/manifests/managedcluster-clusterrole.yaml":                     hubManagedclusterManifestsManagedclusterClusterroleYaml,
	"hub/managedcluster/manifests/managedcluster-clusterrolebinding.yaml":              hubManagedclusterManifestsManagedclusterClusterrolebindingYaml,
	"hub/managedcluster/manifests/managedcluster-service-account.yaml":                 hubManagedclusterManifestsManagedclusterServiceAccountYaml,
	"klusterlet/bootstrap_secret.yaml":                                                 klusterletBootstrap_secretYaml,
	"klusterlet/cluster_role.yaml":                                                     klusterletCluster_roleYaml,
	"klusterlet/cluster_role_binding.yaml":                                             klusterletCluster_role_bindingYaml,
	"klusterlet/crds/0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml,
	"klusterlet/image_pull_secret.yaml":                                                klusterletImage_pull_secretYaml,
	"klusterlet/klusterlet.yaml":                                                       klusterletKlusterletYaml,
	"klusterlet/klusterlet_admin_aggregate_clusterrole.yaml":                           klusterletKlusterlet_admin_aggregate_clusterroleYaml,
	"klusterlet/namespace.yaml":                                                        klusterletNamespaceYaml,
	"klusterlet/operator.yaml":                                                         klusterletOperatorYaml,
	"klusterlet/service_account.yaml":                                                  klusterletService_accountYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"hub": &bintree{nil, map[string]*bintree{
		"managedcluster": &bintree{nil, map[string]*bintree{
			"manifests": &bintree{nil, map[string]*bintree{
				"managedcluster-clusterrole.yaml":        &bintree{hubManagedclusterManifestsManagedclusterClusterroleYaml, map[string]*bintree{}},
				"managedcluster-clusterrolebinding.yaml": &bintree{hubManagedclusterManifestsManagedclusterClusterrolebindingYaml, map[string]*bintree{}},
				"managedcluster-service-account.yaml":    &bintree{hubManagedclusterManifestsManagedclusterServiceAccountYaml, map[string]*bintree{}},
			}},
		}},
	}},
	"klusterlet": &bintree{nil, map[string]*bintree{
		"bootstrap_secret.yaml":     &bintree{klusterletBootstrap_secretYaml, map[string]*bintree{}},
		"cluster_role.yaml":         &bintree{klusterletCluster_roleYaml, map[string]*bintree{}},
		"cluster_role_binding.yaml": &bintree{klusterletCluster_role_bindingYaml, map[string]*bintree{}},
		"crds": &bintree{nil, map[string]*bintree{
			"0000_00_operator.open-cluster-management.io_klusterlets.crd.yaml": &bintree{klusterletCrds0000_00_operatorOpenClusterManagementIo_klusterletsCrdYaml, map[string]*bintree{}},
		}},
		"image_pull_secret.yaml":                      &bintree{klusterletImage_pull_secretYaml, map[string]*bintree{}},
		"klusterlet.yaml":                             &bintree{klusterletKlusterletYaml, map[string]*bintree{}},
		"klusterlet_admin_aggregate_clusterrole.yaml": &bintree{klusterletKlusterlet_admin_aggregate_clusterroleYaml, map[string]*bintree{}},
		"namespace.yaml":                              &bintree{klusterletNamespaceYaml, map[string]*bintree{}},
		"operator.yaml":                               &bintree{klusterletOperatorYaml, map[string]*bintree{}},
		"service_account.yaml":                        &bintree{klusterletService_accountYaml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
